
DB_CONFIG = {
    "host":     "localhost",
    "port":     5432,
    "dbname":   "vama",
    "user":     "postgres",
    "password": "root",
}

#!/usr/bin/env python3
"""
seed_data.py

Seed your local PostgreSQL database with dummy data for the following tables:

1. users
   - id       bigint PRIMARY KEY GENERATED BY DEFAULT AS SEQUENCE
   - email    varchar(255) NOT NULL UNIQUE
   - password varchar(255) NOT NULL

2. customers
   - customer_id    integer PRIMARY KEY GENERATED BY DEFAULT AS SEQUENCE
   - name           varchar(200) NOT NULL
   - phone          varchar(20)
   - email          varchar(100)
   - address        text
   - loyalty_points integer DEFAULT 0
   - total_dues     numeric(10,2) DEFAULT 0.00
   - created_at     timestamp WITHOUT time zone DEFAULT CURRENT_TIMESTAMP
   - updated_at     timestamp WITHOUT time zone DEFAULT CURRENT_TIMESTAMP

Usage:
    1. pip install psycopg2-binary Faker
    2. Configure DB_CONFIG below.
    3. Adjust NUM_USERS and NUM_CUSTOMERS as desired.
    4. Run: python seed_data.py
"""

import sys
from faker import Faker
import psycopg2
from psycopg2 import OperationalError, IntegrityError

# ─── CONFIGURATION ─────────────────────────────────────────────────────────────


# How many dummy rows to insert per table
NUM_USERS = 100
NUM_CUSTOMERS = 50

# ─── CONNECTION HELPER ─────────────────────────────────────────────────────────

def get_connection():
    """Establish a connection to the PostgreSQL database."""
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        conn.autocommit = False
        return conn
    except OperationalError as e:
        print(f"[ERROR] Could not connect to database: {e}")
        sys.exit(1)

# ─── SEED USERS ────────────────────────────────────────────────────────────────

def seed_customers(conn, n):
    """
    Insert `n` fake customers into the customers table.
    Assumes:
      customers(
        customer_id SERIAL,
        name VARCHAR(200),
        phone VARCHAR(20),
        email VARCHAR(100),
        address TEXT,
        loyalty_points INTEGER,
        total_dues NUMERIC(10,2),
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    """
    fake = Faker()
    inserted = 0
    insert_sql = """
        INSERT INTO customers
          (name, phone, email, address, loyalty_points, total_dues)
        VALUES (%s, %s, %s, %s, %s, %s)
    """
    with conn.cursor() as cur:
        for _ in range(n):
            name = fake.name()[:200]
            phone = fake.phone_number()[:20]
            email = fake.unique.email()[:100]
            address = fake.address().replace("\n", ", ")  # flatten lines
            loyalty = fake.random_int(min=0, max=1000)
            total_dues = round(fake.random_number(digits=5) / 100, 2)
            try:
                cur.execute(insert_sql,
                            (name, phone, email, address, loyalty, total_dues))
                inserted += cur.rowcount
            except Exception as e:
                print(f"[ERROR] Failed to insert customer: {e}")
                conn.rollback()
        conn.commit()
    print(f"[customers] Inserted {inserted} out of {n} attempted rows.")

# ─── MAIN ─────────────────────────────────────────────────────────────────────

def main():
    conn = get_connection()
    try:
        # seed_users(conn, NUM_USERS)
        seed_customers(conn, NUM_CUSTOMERS)
    finally:
        conn.close()

if __name__ == "__main__":
    main()
