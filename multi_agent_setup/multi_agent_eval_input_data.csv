original_question,thought,tool_call,action_input,tool_definitions
"
        You are a GitHub operations controller. Your job is to:
        1. Analyze the user's request to understand what they need
        2. Determine which specialized agent(s) should handle the request
        3. Delegate the relevant parts of the request to those agents
        4. Synthesize the results into a coherent response

        Available agents:
        - RepoAgent: Repository creation and management
        - IssuesAgent: Issue and PR tracking and management
        - ContentAgent: File content operations and management
        - SearchAgent: Searching GitHub repositories, issues, and PRs

        Use the appropriate delegation function for each agent.
        

User request: 
You are the Controller Agent for a GitHub operations system that orchestrates multiple specialized agents.

Your responsibilities:
1. Analyze user requests to determine which specialized agent(s) should handle them
2. Break down complex requests into sub-tasks for different agents
3. Coordinate the flow of information between agents
4. Synthesize responses from multiple agents into coherent answers

Available specialized agents:

1. RepoAgent
   - Capabilities: List repositories, create repositories, list commits
   - When to use: For repository management operations

2. IssuesAgent
   - Capabilities: List issues, create issues, close issues, list PRs, create PRs
   - When to use: For issue and pull request operations

3. ContentAgent
   - Capabilities: Read file content, update file content, list repository files
   - When to use: For operations involving file contents

4. SearchAgent
   - Capabilities: Search repositories, search issues
   - When to use: For search operations across GitHub

Decision making guidelines:
- Route requests to the most appropriate specialized agent based on the operation needed
- For complex requests, break them down and delegate parts to different agents
- When multiple agents are needed, coordinate the sequence of operations
- Provide clear context when delegating to an agent

Always maintain a helpful and informative tone with the user, even when handling errors.


User request: Create a repository under my github account puranjaigarg783 of the same as that of a battlestar galactica character. If a repository of the name of a star trek character already exists, chosse a different one, create an issue for adding a README for creating a calculator then commit code and readme for it close the issue after.","The user is asking to create a repository, create an issue, commit code and readme, and close the issue. This involves multiple agents. I will delegate the repository creation to the RepoAgent, issue creation and closing to the IssuesAgent, and file content operations to the ContentAgent. I will also use the SearchAgent to check if a repository with a similar name exists.",delegate_to_search_agent,"{""query"": ""repo:puranjaigarg783 star trek character""}","
list_my_repos: Return the full names (""owner/repo"") of all repos visible to the user.

read_file: Fetch a text/binary file and return its decoded content as str.

commit_file: Create or update *path* with *content* and return the new blob SHA. This tool is used to commit code or text files to a repository.

list_issues: 
    Retrieve all issues from a GitHub repository.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        owner (str, optional): Repository owner. Defaults to DEFAULT_OWNER.
        state (str, optional): Issue state filter: ""open"", ""closed"", or ""all"". Defaults to ""open"".

    Returns:
        List[Dict[str, Union[int, str]]]: A list of dicts each with:
            - number (int): Issue number
            - title (str): Issue title

    Raises:
        RuntimeError: On API errors or unexpected failures.
    

open_issue: Create a new issue and return its number. This tool is used to create new issues in a repository.

list_prs: Return pull requests matching *state* (and optional *base*).

create_pr: Create a pull request and return its number.

list_commits: Return commit SHAs for *branch* (limited by *per_page*).

search_repos: Search repositories and return their full names.

search_issues: Search issues/PRs and return their numbers.

create_repo: Create a new repository and return its full name. This tool is used to create a new GitHub repository.

close_issue: 
    Close an existing GitHub issue.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        issue_number (int): The number of the issue to close.
        owner (str, optional): Repository owner or organization. 
                               Defaults to DEFAULT_OWNER.

    Returns:
        str: Confirmation message.

    Raises:
        RuntimeError: On API errors or unexpected failures.
     This tool is used to close existing issues in a repository.

list_repo_files: 
    List all file paths in a given GitHub repository.

    :param repo: Repository name (e.g., 'Hello-World')
    :param branch: Branch name (default: 'main')
    :param owner: Owner of the repository (default: DEFAULT_OWNER)
    :param token: GitHub access token (recommended for private or high rate limit usage)
    :return: List of file paths
    

update_file_content: Creates or updates a file in a repository with the given content. Used for creating or updating files like README.md. This tool is used to create or update files in a repository, including README files.

delegate_to_repo_agent: Delegates a repository-related task to the RepoAgent which specializes in creating and managing repositories.

delegate_to_issues_agent: Delegates an issue-related task to the IssuesAgent which specializes in creating, managing, and closing issues.

delegate_to_content_agent: Delegates a content-related task to the ContentAgent which specializes in creating, reading, and modifying files and content.

delegate_to_search_agent: Delegates a search-related task to the SearchAgent which specializes in searching for repositories, issues, and other GitHub entities.
"
repo:puranjaigarg783 star trek character,"The user is asking me to find a repository related to ""star trek character"" created by ""puranjaigarg783"".",search_repositories,"{""query"": ""user:puranjaigarg783 star trek character""} ```","
list_my_repos: Return the full names (""owner/repo"") of all repos visible to the user.

read_file: Fetch a text/binary file and return its decoded content as str.

commit_file: Create or update *path* with *content* and return the new blob SHA. This tool is used to commit code or text files to a repository.

list_issues: 
    Retrieve all issues from a GitHub repository.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        owner (str, optional): Repository owner. Defaults to DEFAULT_OWNER.
        state (str, optional): Issue state filter: ""open"", ""closed"", or ""all"". Defaults to ""open"".

    Returns:
        List[Dict[str, Union[int, str]]]: A list of dicts each with:
            - number (int): Issue number
            - title (str): Issue title

    Raises:
        RuntimeError: On API errors or unexpected failures.
    

open_issue: Create a new issue and return its number. This tool is used to create new issues in a repository.

list_prs: Return pull requests matching *state* (and optional *base*).

create_pr: Create a pull request and return its number.

list_commits: Return commit SHAs for *branch* (limited by *per_page*).

search_repos: Search repositories and return their full names.

search_issues: Search issues/PRs and return their numbers.

create_repo: Create a new repository and return its full name. This tool is used to create a new GitHub repository.

close_issue: 
    Close an existing GitHub issue.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        issue_number (int): The number of the issue to close.
        owner (str, optional): Repository owner or organization. 
                               Defaults to DEFAULT_OWNER.

    Returns:
        str: Confirmation message.

    Raises:
        RuntimeError: On API errors or unexpected failures.
     This tool is used to close existing issues in a repository.

list_repo_files: 
    List all file paths in a given GitHub repository.

    :param repo: Repository name (e.g., 'Hello-World')
    :param branch: Branch name (default: 'main')
    :param owner: Owner of the repository (default: DEFAULT_OWNER)
    :param token: GitHub access token (recommended for private or high rate limit usage)
    :return: List of file paths
    

update_file_content: Creates or updates a file in a repository with the given content. Used for creating or updating files like README.md. This tool is used to create or update files in a repository, including README files.

delegate_to_repo_agent: Delegates a repository-related task to the RepoAgent which specializes in creating and managing repositories.

delegate_to_issues_agent: Delegates an issue-related task to the IssuesAgent which specializes in creating, managing, and closing issues.

delegate_to_content_agent: Delegates a content-related task to the ContentAgent which specializes in creating, reading, and modifying files and content.

delegate_to_search_agent: Delegates a search-related task to the SearchAgent which specializes in searching for repositories, issues, and other GitHub entities.
"
repo:puranjaigarg783 star trek character,"The previous attempt to search repositories resulted in an error. I will try again, but this time I will only use the username and the keywords.",search_repositories,"{'query': 'user:puranjaigarg783 ""star trek character""'}","
list_my_repos: Return the full names (""owner/repo"") of all repos visible to the user.

read_file: Fetch a text/binary file and return its decoded content as str.

commit_file: Create or update *path* with *content* and return the new blob SHA. This tool is used to commit code or text files to a repository.

list_issues: 
    Retrieve all issues from a GitHub repository.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        owner (str, optional): Repository owner. Defaults to DEFAULT_OWNER.
        state (str, optional): Issue state filter: ""open"", ""closed"", or ""all"". Defaults to ""open"".

    Returns:
        List[Dict[str, Union[int, str]]]: A list of dicts each with:
            - number (int): Issue number
            - title (str): Issue title

    Raises:
        RuntimeError: On API errors or unexpected failures.
    

open_issue: Create a new issue and return its number. This tool is used to create new issues in a repository.

list_prs: Return pull requests matching *state* (and optional *base*).

create_pr: Create a pull request and return its number.

list_commits: Return commit SHAs for *branch* (limited by *per_page*).

search_repos: Search repositories and return their full names.

search_issues: Search issues/PRs and return their numbers.

create_repo: Create a new repository and return its full name. This tool is used to create a new GitHub repository.

close_issue: 
    Close an existing GitHub issue.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        issue_number (int): The number of the issue to close.
        owner (str, optional): Repository owner or organization. 
                               Defaults to DEFAULT_OWNER.

    Returns:
        str: Confirmation message.

    Raises:
        RuntimeError: On API errors or unexpected failures.
     This tool is used to close existing issues in a repository.

list_repo_files: 
    List all file paths in a given GitHub repository.

    :param repo: Repository name (e.g., 'Hello-World')
    :param branch: Branch name (default: 'main')
    :param owner: Owner of the repository (default: DEFAULT_OWNER)
    :param token: GitHub access token (recommended for private or high rate limit usage)
    :return: List of file paths
    

update_file_content: Creates or updates a file in a repository with the given content. Used for creating or updating files like README.md. This tool is used to create or update files in a repository, including README files.

delegate_to_repo_agent: Delegates a repository-related task to the RepoAgent which specializes in creating and managing repositories.

delegate_to_issues_agent: Delegates an issue-related task to the IssuesAgent which specializes in creating, managing, and closing issues.

delegate_to_content_agent: Delegates a content-related task to the ContentAgent which specializes in creating, reading, and modifying files and content.

delegate_to_search_agent: Delegates a search-related task to the SearchAgent which specializes in searching for repositories, issues, and other GitHub entities.
"
repo:puranjaigarg783 star trek character,"The previous attempt to search repositories resulted in an error. I will try again, but this time I will only use the username.",search_repositories,{'query': 'user:puranjaigarg783'},"
list_my_repos: Return the full names (""owner/repo"") of all repos visible to the user.

read_file: Fetch a text/binary file and return its decoded content as str.

commit_file: Create or update *path* with *content* and return the new blob SHA. This tool is used to commit code or text files to a repository.

list_issues: 
    Retrieve all issues from a GitHub repository.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        owner (str, optional): Repository owner. Defaults to DEFAULT_OWNER.
        state (str, optional): Issue state filter: ""open"", ""closed"", or ""all"". Defaults to ""open"".

    Returns:
        List[Dict[str, Union[int, str]]]: A list of dicts each with:
            - number (int): Issue number
            - title (str): Issue title

    Raises:
        RuntimeError: On API errors or unexpected failures.
    

open_issue: Create a new issue and return its number. This tool is used to create new issues in a repository.

list_prs: Return pull requests matching *state* (and optional *base*).

create_pr: Create a pull request and return its number.

list_commits: Return commit SHAs for *branch* (limited by *per_page*).

search_repos: Search repositories and return their full names.

search_issues: Search issues/PRs and return their numbers.

create_repo: Create a new repository and return its full name. This tool is used to create a new GitHub repository.

close_issue: 
    Close an existing GitHub issue.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        issue_number (int): The number of the issue to close.
        owner (str, optional): Repository owner or organization. 
                               Defaults to DEFAULT_OWNER.

    Returns:
        str: Confirmation message.

    Raises:
        RuntimeError: On API errors or unexpected failures.
     This tool is used to close existing issues in a repository.

list_repo_files: 
    List all file paths in a given GitHub repository.

    :param repo: Repository name (e.g., 'Hello-World')
    :param branch: Branch name (default: 'main')
    :param owner: Owner of the repository (default: DEFAULT_OWNER)
    :param token: GitHub access token (recommended for private or high rate limit usage)
    :return: List of file paths
    

update_file_content: Creates or updates a file in a repository with the given content. Used for creating or updating files like README.md. This tool is used to create or update files in a repository, including README files.

delegate_to_repo_agent: Delegates a repository-related task to the RepoAgent which specializes in creating and managing repositories.

delegate_to_issues_agent: Delegates an issue-related task to the IssuesAgent which specializes in creating, managing, and closing issues.

delegate_to_content_agent: Delegates a content-related task to the ContentAgent which specializes in creating, reading, and modifying files and content.

delegate_to_search_agent: Delegates a search-related task to the SearchAgent which specializes in searching for repositories, issues, and other GitHub entities.
"
"Create a repository under the puranjaigarg783 account with the name ""Starbuck""","The current language of the user is: English. I need to use the create_repository tool to create a repository with the name ""Starbuck"" under the puranjaigarg783 account.",create_repository,"{""name"": ""Starbuck""} ```","
list_my_repos: Return the full names (""owner/repo"") of all repos visible to the user.

read_file: Fetch a text/binary file and return its decoded content as str.

commit_file: Create or update *path* with *content* and return the new blob SHA. This tool is used to commit code or text files to a repository.

list_issues: 
    Retrieve all issues from a GitHub repository.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        owner (str, optional): Repository owner. Defaults to DEFAULT_OWNER.
        state (str, optional): Issue state filter: ""open"", ""closed"", or ""all"". Defaults to ""open"".

    Returns:
        List[Dict[str, Union[int, str]]]: A list of dicts each with:
            - number (int): Issue number
            - title (str): Issue title

    Raises:
        RuntimeError: On API errors or unexpected failures.
    

open_issue: Create a new issue and return its number. This tool is used to create new issues in a repository.

list_prs: Return pull requests matching *state* (and optional *base*).

create_pr: Create a pull request and return its number.

list_commits: Return commit SHAs for *branch* (limited by *per_page*).

search_repos: Search repositories and return their full names.

search_issues: Search issues/PRs and return their numbers.

create_repo: Create a new repository and return its full name. This tool is used to create a new GitHub repository.

close_issue: 
    Close an existing GitHub issue.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        issue_number (int): The number of the issue to close.
        owner (str, optional): Repository owner or organization. 
                               Defaults to DEFAULT_OWNER.

    Returns:
        str: Confirmation message.

    Raises:
        RuntimeError: On API errors or unexpected failures.
     This tool is used to close existing issues in a repository.

list_repo_files: 
    List all file paths in a given GitHub repository.

    :param repo: Repository name (e.g., 'Hello-World')
    :param branch: Branch name (default: 'main')
    :param owner: Owner of the repository (default: DEFAULT_OWNER)
    :param token: GitHub access token (recommended for private or high rate limit usage)
    :return: List of file paths
    

update_file_content: Creates or updates a file in a repository with the given content. Used for creating or updating files like README.md. This tool is used to create or update files in a repository, including README files.

delegate_to_repo_agent: Delegates a repository-related task to the RepoAgent which specializes in creating and managing repositories.

delegate_to_issues_agent: Delegates an issue-related task to the IssuesAgent which specializes in creating, managing, and closing issues.

delegate_to_content_agent: Delegates a content-related task to the ContentAgent which specializes in creating, reading, and modifying files and content.

delegate_to_search_agent: Delegates a search-related task to the SearchAgent which specializes in searching for repositories, issues, and other GitHub entities.
"
"
        You are a GitHub operations controller. Your job is to:
        1. Analyze the user's request to understand what they need
        2. Determine which specialized agent(s) should handle the request
        3. Delegate the relevant parts of the request to those agents
        4. Synthesize the results into a coherent response

        Available agents:
        - RepoAgent: Repository creation and management
        - IssuesAgent: Issue and PR tracking and management
        - ContentAgent: File content operations and management
        - SearchAgent: Searching GitHub repositories, issues, and PRs

        Use the appropriate delegation function for each agent.
        

User request: 
You are the Controller Agent for a GitHub operations system that orchestrates multiple specialized agents.

Your responsibilities:
1. Analyze user requests to determine which specialized agent(s) should handle them
2. Break down complex requests into sub-tasks for different agents
3. Coordinate the flow of information between agents
4. Synthesize responses from multiple agents into coherent answers

Available specialized agents:

1. RepoAgent
   - Capabilities: List repositories, create repositories, list commits
   - When to use: For repository management operations

2. IssuesAgent
   - Capabilities: List issues, create issues, close issues, list PRs, create PRs
   - When to use: For issue and pull request operations

3. ContentAgent
   - Capabilities: Read file content, update file content, list repository files
   - When to use: For operations involving file contents

4. SearchAgent
   - Capabilities: Search repositories, search issues
   - When to use: For search operations across GitHub

Decision making guidelines:
- Route requests to the most appropriate specialized agent based on the operation needed
- For complex requests, break them down and delegate parts to different agents
- When multiple agents are needed, coordinate the sequence of operations
- Provide clear context when delegating to an agent

Always maintain a helpful and informative tone with the user, even when handling errors.


User request: Create a repository under my github account puranjaigarg783 of the same as that of a battlestar galactica character. If a repository of the name of a star trek character already exists, chosse a different one, create an issue for adding a README for creating a calculator then commit code and readme for it close the issue after.","The search agent did not find any repositories related to Star Trek characters under the user's account. I will now proceed with creating a repository with a Battlestar Galactica character name, creating an issue, adding a README and calculator code, committing the changes, and closing the issue. I will delegate the repository creation to the RepoAgent, issue creation and closing to the IssuesAgent, and file content operations to the ContentAgent.",delegate_to_repo_agent,"{'query': 'Create a repository under the puranjaigarg783 account with the name ""Starbuck""'}","
list_my_repos: Return the full names (""owner/repo"") of all repos visible to the user.

read_file: Fetch a text/binary file and return its decoded content as str.

commit_file: Create or update *path* with *content* and return the new blob SHA. This tool is used to commit code or text files to a repository.

list_issues: 
    Retrieve all issues from a GitHub repository.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        owner (str, optional): Repository owner. Defaults to DEFAULT_OWNER.
        state (str, optional): Issue state filter: ""open"", ""closed"", or ""all"". Defaults to ""open"".

    Returns:
        List[Dict[str, Union[int, str]]]: A list of dicts each with:
            - number (int): Issue number
            - title (str): Issue title

    Raises:
        RuntimeError: On API errors or unexpected failures.
    

open_issue: Create a new issue and return its number. This tool is used to create new issues in a repository.

list_prs: Return pull requests matching *state* (and optional *base*).

create_pr: Create a pull request and return its number.

list_commits: Return commit SHAs for *branch* (limited by *per_page*).

search_repos: Search repositories and return their full names.

search_issues: Search issues/PRs and return their numbers.

create_repo: Create a new repository and return its full name. This tool is used to create a new GitHub repository.

close_issue: 
    Close an existing GitHub issue.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        issue_number (int): The number of the issue to close.
        owner (str, optional): Repository owner or organization. 
                               Defaults to DEFAULT_OWNER.

    Returns:
        str: Confirmation message.

    Raises:
        RuntimeError: On API errors or unexpected failures.
     This tool is used to close existing issues in a repository.

list_repo_files: 
    List all file paths in a given GitHub repository.

    :param repo: Repository name (e.g., 'Hello-World')
    :param branch: Branch name (default: 'main')
    :param owner: Owner of the repository (default: DEFAULT_OWNER)
    :param token: GitHub access token (recommended for private or high rate limit usage)
    :return: List of file paths
    

update_file_content: Creates or updates a file in a repository with the given content. Used for creating or updating files like README.md. This tool is used to create or update files in a repository, including README files.

delegate_to_repo_agent: Delegates a repository-related task to the RepoAgent which specializes in creating and managing repositories.

delegate_to_issues_agent: Delegates an issue-related task to the IssuesAgent which specializes in creating, managing, and closing issues.

delegate_to_content_agent: Delegates a content-related task to the ContentAgent which specializes in creating, reading, and modifying files and content.

delegate_to_search_agent: Delegates a search-related task to the SearchAgent which specializes in searching for repositories, issues, and other GitHub entities.
"
"
        You are a GitHub operations controller. Your job is to:
        1. Analyze the user's request to understand what they need
        2. Determine which specialized agent(s) should handle the request
        3. Delegate the relevant parts of the request to those agents
        4. Synthesize the results into a coherent response

        Available agents:
        - RepoAgent: Repository creation and management
        - IssuesAgent: Issue and PR tracking and management
        - ContentAgent: File content operations and management
        - SearchAgent: Searching GitHub repositories, issues, and PRs

        Use the appropriate delegation function for each agent.
        

User request: 
You are the Controller Agent for a GitHub operations system that orchestrates multiple specialized agents.

Your responsibilities:
1. Analyze user requests to determine which specialized agent(s) should handle them
2. Break down complex requests into sub-tasks for different agents
3. Coordinate the flow of information between agents
4. Synthesize responses from multiple agents into coherent answers

Available specialized agents:

1. RepoAgent
   - Capabilities: List repositories, create repositories, list commits
   - When to use: For repository management operations

2. IssuesAgent
   - Capabilities: List issues, create issues, close issues, list PRs, create PRs
   - When to use: For issue and pull request operations

3. ContentAgent
   - Capabilities: Read file content, update file content, list repository files
   - When to use: For operations involving file contents

4. SearchAgent
   - Capabilities: Search repositories, search issues
   - When to use: For search operations across GitHub

Decision making guidelines:
- Route requests to the most appropriate specialized agent based on the operation needed
- For complex requests, break them down and delegate parts to different agents
- When multiple agents are needed, coordinate the sequence of operations
- Provide clear context when delegating to an agent

Always maintain a helpful and informative tone with the user, even when handling errors.


User request: Create a repository under my github account puranjaigarg783 of the same as that of a battlestar galactica character. If a repository of the name of a star trek character already exists, chosse a different one, create an issue for adding a README for creating a calculator then commit code and readme for it close the issue after.","Now that the repository has been created, I will delegate the creation of an issue to the IssuesAgent.",delegate_to_issues_agent,"{'query': 'Create an issue in the puranjaigarg783/Starbuck repository with the title ""Add README and calculator functionality"" and body ""Create a README file and implement basic calculator functionality.""'}","
list_my_repos: Return the full names (""owner/repo"") of all repos visible to the user.

read_file: Fetch a text/binary file and return its decoded content as str.

commit_file: Create or update *path* with *content* and return the new blob SHA. This tool is used to commit code or text files to a repository.

list_issues: 
    Retrieve all issues from a GitHub repository.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        owner (str, optional): Repository owner. Defaults to DEFAULT_OWNER.
        state (str, optional): Issue state filter: ""open"", ""closed"", or ""all"". Defaults to ""open"".

    Returns:
        List[Dict[str, Union[int, str]]]: A list of dicts each with:
            - number (int): Issue number
            - title (str): Issue title

    Raises:
        RuntimeError: On API errors or unexpected failures.
    

open_issue: Create a new issue and return its number. This tool is used to create new issues in a repository.

list_prs: Return pull requests matching *state* (and optional *base*).

create_pr: Create a pull request and return its number.

list_commits: Return commit SHAs for *branch* (limited by *per_page*).

search_repos: Search repositories and return their full names.

search_issues: Search issues/PRs and return their numbers.

create_repo: Create a new repository and return its full name. This tool is used to create a new GitHub repository.

close_issue: 
    Close an existing GitHub issue.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        issue_number (int): The number of the issue to close.
        owner (str, optional): Repository owner or organization. 
                               Defaults to DEFAULT_OWNER.

    Returns:
        str: Confirmation message.

    Raises:
        RuntimeError: On API errors or unexpected failures.
     This tool is used to close existing issues in a repository.

list_repo_files: 
    List all file paths in a given GitHub repository.

    :param repo: Repository name (e.g., 'Hello-World')
    :param branch: Branch name (default: 'main')
    :param owner: Owner of the repository (default: DEFAULT_OWNER)
    :param token: GitHub access token (recommended for private or high rate limit usage)
    :return: List of file paths
    

update_file_content: Creates or updates a file in a repository with the given content. Used for creating or updating files like README.md. This tool is used to create or update files in a repository, including README files.

delegate_to_repo_agent: Delegates a repository-related task to the RepoAgent which specializes in creating and managing repositories.

delegate_to_issues_agent: Delegates an issue-related task to the IssuesAgent which specializes in creating, managing, and closing issues.

delegate_to_content_agent: Delegates a content-related task to the ContentAgent which specializes in creating, reading, and modifying files and content.

delegate_to_search_agent: Delegates a search-related task to the SearchAgent which specializes in searching for repositories, issues, and other GitHub entities.
"
"Create an issue in the puranjaigarg783/Starbuck repository with the title ""Add README and calculator functionality"" and body ""Create a README file and implement basic calculator functionality.""",The user wants me to create an issue in a specific repository. I have the necessary information to create the issue.,create_issue,"{""repo"": ""Starbuck"", ""title"": ""Add README and calculator functionality"", ""body"": ""Create a README file and implement basic calculator functionality."", ""owner"": ""puranjaigarg783""} ```","
list_my_repos: Return the full names (""owner/repo"") of all repos visible to the user.

read_file: Fetch a text/binary file and return its decoded content as str.

commit_file: Create or update *path* with *content* and return the new blob SHA. This tool is used to commit code or text files to a repository.

list_issues: 
    Retrieve all issues from a GitHub repository.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        owner (str, optional): Repository owner. Defaults to DEFAULT_OWNER.
        state (str, optional): Issue state filter: ""open"", ""closed"", or ""all"". Defaults to ""open"".

    Returns:
        List[Dict[str, Union[int, str]]]: A list of dicts each with:
            - number (int): Issue number
            - title (str): Issue title

    Raises:
        RuntimeError: On API errors or unexpected failures.
    

open_issue: Create a new issue and return its number. This tool is used to create new issues in a repository.

list_prs: Return pull requests matching *state* (and optional *base*).

create_pr: Create a pull request and return its number.

list_commits: Return commit SHAs for *branch* (limited by *per_page*).

search_repos: Search repositories and return their full names.

search_issues: Search issues/PRs and return their numbers.

create_repo: Create a new repository and return its full name. This tool is used to create a new GitHub repository.

close_issue: 
    Close an existing GitHub issue.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        issue_number (int): The number of the issue to close.
        owner (str, optional): Repository owner or organization. 
                               Defaults to DEFAULT_OWNER.

    Returns:
        str: Confirmation message.

    Raises:
        RuntimeError: On API errors or unexpected failures.
     This tool is used to close existing issues in a repository.

list_repo_files: 
    List all file paths in a given GitHub repository.

    :param repo: Repository name (e.g., 'Hello-World')
    :param branch: Branch name (default: 'main')
    :param owner: Owner of the repository (default: DEFAULT_OWNER)
    :param token: GitHub access token (recommended for private or high rate limit usage)
    :return: List of file paths
    

update_file_content: Creates or updates a file in a repository with the given content. Used for creating or updating files like README.md. This tool is used to create or update files in a repository, including README files.

delegate_to_repo_agent: Delegates a repository-related task to the RepoAgent which specializes in creating and managing repositories.

delegate_to_issues_agent: Delegates an issue-related task to the IssuesAgent which specializes in creating, managing, and closing issues.

delegate_to_content_agent: Delegates a content-related task to the ContentAgent which specializes in creating, reading, and modifying files and content.

delegate_to_search_agent: Delegates a search-related task to the SearchAgent which specializes in searching for repositories, issues, and other GitHub entities.
"
"
        You are a GitHub operations controller. Your job is to:
        1. Analyze the user's request to understand what they need
        2. Determine which specialized agent(s) should handle the request
        3. Delegate the relevant parts of the request to those agents
        4. Synthesize the results into a coherent response

        Available agents:
        - RepoAgent: Repository creation and management
        - IssuesAgent: Issue and PR tracking and management
        - ContentAgent: File content operations and management
        - SearchAgent: Searching GitHub repositories, issues, and PRs

        Use the appropriate delegation function for each agent.
        

User request: 
You are the Controller Agent for a GitHub operations system that orchestrates multiple specialized agents.

Your responsibilities:
1. Analyze user requests to determine which specialized agent(s) should handle them
2. Break down complex requests into sub-tasks for different agents
3. Coordinate the flow of information between agents
4. Synthesize responses from multiple agents into coherent answers

Available specialized agents:

1. RepoAgent
   - Capabilities: List repositories, create repositories, list commits
   - When to use: For repository management operations

2. IssuesAgent
   - Capabilities: List issues, create issues, close issues, list PRs, create PRs
   - When to use: For issue and pull request operations

3. ContentAgent
   - Capabilities: Read file content, update file content, list repository files
   - When to use: For operations involving file contents

4. SearchAgent
   - Capabilities: Search repositories, search issues
   - When to use: For search operations across GitHub

Decision making guidelines:
- Route requests to the most appropriate specialized agent based on the operation needed
- For complex requests, break them down and delegate parts to different agents
- When multiple agents are needed, coordinate the sequence of operations
- Provide clear context when delegating to an agent

Always maintain a helpful and informative tone with the user, even when handling errors.


User request: Create a repository under my github account puranjaigarg783 of the same as that of a battlestar galactica character. If a repository of the name of a star trek character already exists, chosse a different one, create an issue for adding a README for creating a calculator then commit code and readme for it close the issue after.","Now that the issue has been created, I will delegate the task of adding a README and calculator code to the ContentAgent.",delegate_to_content_agent,"{'query': 'In the puranjaigarg783/Starbuck repository, create a README.md file with the content ""This repository contains a basic calculator implementation."" and create a calculator.py file with the content ""def add(x, y):\n return x + y\n\ndef subtract(x, y):\n return x - y\n\nprint(add(1, 2))\nprint(subtract(4, 2))""'}","
list_my_repos: Return the full names (""owner/repo"") of all repos visible to the user.

read_file: Fetch a text/binary file and return its decoded content as str.

commit_file: Create or update *path* with *content* and return the new blob SHA. This tool is used to commit code or text files to a repository.

list_issues: 
    Retrieve all issues from a GitHub repository.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        owner (str, optional): Repository owner. Defaults to DEFAULT_OWNER.
        state (str, optional): Issue state filter: ""open"", ""closed"", or ""all"". Defaults to ""open"".

    Returns:
        List[Dict[str, Union[int, str]]]: A list of dicts each with:
            - number (int): Issue number
            - title (str): Issue title

    Raises:
        RuntimeError: On API errors or unexpected failures.
    

open_issue: Create a new issue and return its number. This tool is used to create new issues in a repository.

list_prs: Return pull requests matching *state* (and optional *base*).

create_pr: Create a pull request and return its number.

list_commits: Return commit SHAs for *branch* (limited by *per_page*).

search_repos: Search repositories and return their full names.

search_issues: Search issues/PRs and return their numbers.

create_repo: Create a new repository and return its full name. This tool is used to create a new GitHub repository.

close_issue: 
    Close an existing GitHub issue.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        issue_number (int): The number of the issue to close.
        owner (str, optional): Repository owner or organization. 
                               Defaults to DEFAULT_OWNER.

    Returns:
        str: Confirmation message.

    Raises:
        RuntimeError: On API errors or unexpected failures.
     This tool is used to close existing issues in a repository.

list_repo_files: 
    List all file paths in a given GitHub repository.

    :param repo: Repository name (e.g., 'Hello-World')
    :param branch: Branch name (default: 'main')
    :param owner: Owner of the repository (default: DEFAULT_OWNER)
    :param token: GitHub access token (recommended for private or high rate limit usage)
    :return: List of file paths
    

update_file_content: Creates or updates a file in a repository with the given content. Used for creating or updating files like README.md. This tool is used to create or update files in a repository, including README files.

delegate_to_repo_agent: Delegates a repository-related task to the RepoAgent which specializes in creating and managing repositories.

delegate_to_issues_agent: Delegates an issue-related task to the IssuesAgent which specializes in creating, managing, and closing issues.

delegate_to_content_agent: Delegates a content-related task to the ContentAgent which specializes in creating, reading, and modifying files and content.

delegate_to_search_agent: Delegates a search-related task to the SearchAgent which specializes in searching for repositories, issues, and other GitHub entities.
"
"In the puranjaigarg783/Starbuck repository, create a README.md file with the content ""This repository contains a basic calculator implementation."" and create a calculator.py file with the content ""def add(x, y):
 return x + y

def subtract(x, y):
 return x - y

print(add(1, 2))
print(subtract(4, 2))""",The previous action failed again. It seems I'm having trouble with the repository name. I'll try listing the files in the repository to confirm the correct name and owner.,list_repo_files,"{'repo': 'Starbuck', 'owner': 'puranjaigarg783'}","
list_my_repos: Return the full names (""owner/repo"") of all repos visible to the user.

read_file: Fetch a text/binary file and return its decoded content as str.

commit_file: Create or update *path* with *content* and return the new blob SHA. This tool is used to commit code or text files to a repository.

list_issues: 
    Retrieve all issues from a GitHub repository.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        owner (str, optional): Repository owner. Defaults to DEFAULT_OWNER.
        state (str, optional): Issue state filter: ""open"", ""closed"", or ""all"". Defaults to ""open"".

    Returns:
        List[Dict[str, Union[int, str]]]: A list of dicts each with:
            - number (int): Issue number
            - title (str): Issue title

    Raises:
        RuntimeError: On API errors or unexpected failures.
    

open_issue: Create a new issue and return its number. This tool is used to create new issues in a repository.

list_prs: Return pull requests matching *state* (and optional *base*).

create_pr: Create a pull request and return its number.

list_commits: Return commit SHAs for *branch* (limited by *per_page*).

search_repos: Search repositories and return their full names.

search_issues: Search issues/PRs and return their numbers.

create_repo: Create a new repository and return its full name. This tool is used to create a new GitHub repository.

close_issue: 
    Close an existing GitHub issue.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        issue_number (int): The number of the issue to close.
        owner (str, optional): Repository owner or organization. 
                               Defaults to DEFAULT_OWNER.

    Returns:
        str: Confirmation message.

    Raises:
        RuntimeError: On API errors or unexpected failures.
     This tool is used to close existing issues in a repository.

list_repo_files: 
    List all file paths in a given GitHub repository.

    :param repo: Repository name (e.g., 'Hello-World')
    :param branch: Branch name (default: 'main')
    :param owner: Owner of the repository (default: DEFAULT_OWNER)
    :param token: GitHub access token (recommended for private or high rate limit usage)
    :return: List of file paths
    

update_file_content: Creates or updates a file in a repository with the given content. Used for creating or updating files like README.md. This tool is used to create or update files in a repository, including README files.

delegate_to_repo_agent: Delegates a repository-related task to the RepoAgent which specializes in creating and managing repositories.

delegate_to_issues_agent: Delegates an issue-related task to the IssuesAgent which specializes in creating, managing, and closing issues.

delegate_to_content_agent: Delegates a content-related task to the ContentAgent which specializes in creating, reading, and modifying files and content.

delegate_to_search_agent: Delegates a search-related task to the SearchAgent which specializes in searching for repositories, issues, and other GitHub entities.
"
"In the puranjaigarg783/Starbuck repository, create a README.md file with the content ""This repository contains a basic calculator implementation."" and create a calculator.py file with the content ""def add(x, y):
 return x + y

def subtract(x, y):
 return x - y

print(add(1, 2))
print(subtract(4, 2))""","The user wants me to create two files in a GitHub repository: README.md and calculator.py. I will use the update_file_content tool twice, once for each file.",update_file_content,"{""repo"": ""puranjaigarg783/Starbuck"", ""path"": ""README.md"", ""message"": ""Create README.md"", ""content"": ""This repository contains a basic calculator implementation.""} ```","
list_my_repos: Return the full names (""owner/repo"") of all repos visible to the user.

read_file: Fetch a text/binary file and return its decoded content as str.

commit_file: Create or update *path* with *content* and return the new blob SHA. This tool is used to commit code or text files to a repository.

list_issues: 
    Retrieve all issues from a GitHub repository.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        owner (str, optional): Repository owner. Defaults to DEFAULT_OWNER.
        state (str, optional): Issue state filter: ""open"", ""closed"", or ""all"". Defaults to ""open"".

    Returns:
        List[Dict[str, Union[int, str]]]: A list of dicts each with:
            - number (int): Issue number
            - title (str): Issue title

    Raises:
        RuntimeError: On API errors or unexpected failures.
    

open_issue: Create a new issue and return its number. This tool is used to create new issues in a repository.

list_prs: Return pull requests matching *state* (and optional *base*).

create_pr: Create a pull request and return its number.

list_commits: Return commit SHAs for *branch* (limited by *per_page*).

search_repos: Search repositories and return their full names.

search_issues: Search issues/PRs and return their numbers.

create_repo: Create a new repository and return its full name. This tool is used to create a new GitHub repository.

close_issue: 
    Close an existing GitHub issue.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        issue_number (int): The number of the issue to close.
        owner (str, optional): Repository owner or organization. 
                               Defaults to DEFAULT_OWNER.

    Returns:
        str: Confirmation message.

    Raises:
        RuntimeError: On API errors or unexpected failures.
     This tool is used to close existing issues in a repository.

list_repo_files: 
    List all file paths in a given GitHub repository.

    :param repo: Repository name (e.g., 'Hello-World')
    :param branch: Branch name (default: 'main')
    :param owner: Owner of the repository (default: DEFAULT_OWNER)
    :param token: GitHub access token (recommended for private or high rate limit usage)
    :return: List of file paths
    

update_file_content: Creates or updates a file in a repository with the given content. Used for creating or updating files like README.md. This tool is used to create or update files in a repository, including README files.

delegate_to_repo_agent: Delegates a repository-related task to the RepoAgent which specializes in creating and managing repositories.

delegate_to_issues_agent: Delegates an issue-related task to the IssuesAgent which specializes in creating, managing, and closing issues.

delegate_to_content_agent: Delegates a content-related task to the ContentAgent which specializes in creating, reading, and modifying files and content.

delegate_to_search_agent: Delegates a search-related task to the SearchAgent which specializes in searching for repositories, issues, and other GitHub entities.
"
"In the puranjaigarg783/Starbuck repository, create a README.md file with the content ""This repository contains a basic calculator implementation."" and create a calculator.py file with the content ""def add(x, y):
 return x + y

def subtract(x, y):
 return x - y

print(add(1, 2))
print(subtract(4, 2))""","The previous action failed because the repository 'puranjaigarg783/Starbuck' under the owner 'Shreyas-Yadav' was not found. I need to correct the repository owner. I'll try again, assuming the user's username is the repository owner.",update_file_content,"{'repo': 'puranjaigarg783/Starbuck', 'path': 'README.md', 'message': 'Create README.md', 'content': 'This repository contains a basic calculator implementation.', 'owner': 'puranjaigarg783'}","
list_my_repos: Return the full names (""owner/repo"") of all repos visible to the user.

read_file: Fetch a text/binary file and return its decoded content as str.

commit_file: Create or update *path* with *content* and return the new blob SHA. This tool is used to commit code or text files to a repository.

list_issues: 
    Retrieve all issues from a GitHub repository.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        owner (str, optional): Repository owner. Defaults to DEFAULT_OWNER.
        state (str, optional): Issue state filter: ""open"", ""closed"", or ""all"". Defaults to ""open"".

    Returns:
        List[Dict[str, Union[int, str]]]: A list of dicts each with:
            - number (int): Issue number
            - title (str): Issue title

    Raises:
        RuntimeError: On API errors or unexpected failures.
    

open_issue: Create a new issue and return its number. This tool is used to create new issues in a repository.

list_prs: Return pull requests matching *state* (and optional *base*).

create_pr: Create a pull request and return its number.

list_commits: Return commit SHAs for *branch* (limited by *per_page*).

search_repos: Search repositories and return their full names.

search_issues: Search issues/PRs and return their numbers.

create_repo: Create a new repository and return its full name. This tool is used to create a new GitHub repository.

close_issue: 
    Close an existing GitHub issue.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        issue_number (int): The number of the issue to close.
        owner (str, optional): Repository owner or organization. 
                               Defaults to DEFAULT_OWNER.

    Returns:
        str: Confirmation message.

    Raises:
        RuntimeError: On API errors or unexpected failures.
     This tool is used to close existing issues in a repository.

list_repo_files: 
    List all file paths in a given GitHub repository.

    :param repo: Repository name (e.g., 'Hello-World')
    :param branch: Branch name (default: 'main')
    :param owner: Owner of the repository (default: DEFAULT_OWNER)
    :param token: GitHub access token (recommended for private or high rate limit usage)
    :return: List of file paths
    

update_file_content: Creates or updates a file in a repository with the given content. Used for creating or updating files like README.md. This tool is used to create or update files in a repository, including README files.

delegate_to_repo_agent: Delegates a repository-related task to the RepoAgent which specializes in creating and managing repositories.

delegate_to_issues_agent: Delegates an issue-related task to the IssuesAgent which specializes in creating, managing, and closing issues.

delegate_to_content_agent: Delegates a content-related task to the ContentAgent which specializes in creating, reading, and modifying files and content.

delegate_to_search_agent: Delegates a search-related task to the SearchAgent which specializes in searching for repositories, issues, and other GitHub entities.
"
"In the puranjaigarg783/Starbuck repository, create a README.md file with the content ""This repository contains a basic calculator implementation."" and create a calculator.py file with the content ""def add(x, y):
 return x + y

def subtract(x, y):
 return x - y

print(add(1, 2))
print(subtract(4, 2))""","Okay, the repository exists and is named 'Starbuck' under the owner 'puranjaigarg783'. The previous error indicates that the repository is empty. I will now attempt to create the README.md file again.",update_file_content,"{'repo': 'Starbuck', 'path': 'README.md', 'message': 'Create README.md', 'content': 'This repository contains a basic calculator implementation.', 'owner': 'puranjaigarg783'}","
list_my_repos: Return the full names (""owner/repo"") of all repos visible to the user.

read_file: Fetch a text/binary file and return its decoded content as str.

commit_file: Create or update *path* with *content* and return the new blob SHA. This tool is used to commit code or text files to a repository.

list_issues: 
    Retrieve all issues from a GitHub repository.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        owner (str, optional): Repository owner. Defaults to DEFAULT_OWNER.
        state (str, optional): Issue state filter: ""open"", ""closed"", or ""all"". Defaults to ""open"".

    Returns:
        List[Dict[str, Union[int, str]]]: A list of dicts each with:
            - number (int): Issue number
            - title (str): Issue title

    Raises:
        RuntimeError: On API errors or unexpected failures.
    

open_issue: Create a new issue and return its number. This tool is used to create new issues in a repository.

list_prs: Return pull requests matching *state* (and optional *base*).

create_pr: Create a pull request and return its number.

list_commits: Return commit SHAs for *branch* (limited by *per_page*).

search_repos: Search repositories and return their full names.

search_issues: Search issues/PRs and return their numbers.

create_repo: Create a new repository and return its full name. This tool is used to create a new GitHub repository.

close_issue: 
    Close an existing GitHub issue.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        issue_number (int): The number of the issue to close.
        owner (str, optional): Repository owner or organization. 
                               Defaults to DEFAULT_OWNER.

    Returns:
        str: Confirmation message.

    Raises:
        RuntimeError: On API errors or unexpected failures.
     This tool is used to close existing issues in a repository.

list_repo_files: 
    List all file paths in a given GitHub repository.

    :param repo: Repository name (e.g., 'Hello-World')
    :param branch: Branch name (default: 'main')
    :param owner: Owner of the repository (default: DEFAULT_OWNER)
    :param token: GitHub access token (recommended for private or high rate limit usage)
    :return: List of file paths
    

update_file_content: Creates or updates a file in a repository with the given content. Used for creating or updating files like README.md. This tool is used to create or update files in a repository, including README files.

delegate_to_repo_agent: Delegates a repository-related task to the RepoAgent which specializes in creating and managing repositories.

delegate_to_issues_agent: Delegates an issue-related task to the IssuesAgent which specializes in creating, managing, and closing issues.

delegate_to_content_agent: Delegates a content-related task to the ContentAgent which specializes in creating, reading, and modifying files and content.

delegate_to_search_agent: Delegates a search-related task to the SearchAgent which specializes in searching for repositories, issues, and other GitHub entities.
"
"In the puranjaigarg783/Starbuck repository, create a README.md file with the content ""This repository contains a basic calculator implementation."" and create a calculator.py file with the content ""def add(x, y):
 return x + y

def subtract(x, y):
 return x - y

print(add(1, 2))
print(subtract(4, 2))""",The README.md file was successfully created. Now I will create the calculator.py file.,update_file_content,"{'repo': 'Starbuck', 'path': 'calculator.py', 'message': 'Create calculator.py', 'content': 'def add(x, y):\n return x + y\n\ndef subtract(x, y):\n return x - y\n\nprint(add(1, 2))\nprint(subtract(4, 2))', 'owner': 'puranjaigarg783'}","
list_my_repos: Return the full names (""owner/repo"") of all repos visible to the user.

read_file: Fetch a text/binary file and return its decoded content as str.

commit_file: Create or update *path* with *content* and return the new blob SHA. This tool is used to commit code or text files to a repository.

list_issues: 
    Retrieve all issues from a GitHub repository.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        owner (str, optional): Repository owner. Defaults to DEFAULT_OWNER.
        state (str, optional): Issue state filter: ""open"", ""closed"", or ""all"". Defaults to ""open"".

    Returns:
        List[Dict[str, Union[int, str]]]: A list of dicts each with:
            - number (int): Issue number
            - title (str): Issue title

    Raises:
        RuntimeError: On API errors or unexpected failures.
    

open_issue: Create a new issue and return its number. This tool is used to create new issues in a repository.

list_prs: Return pull requests matching *state* (and optional *base*).

create_pr: Create a pull request and return its number.

list_commits: Return commit SHAs for *branch* (limited by *per_page*).

search_repos: Search repositories and return their full names.

search_issues: Search issues/PRs and return their numbers.

create_repo: Create a new repository and return its full name. This tool is used to create a new GitHub repository.

close_issue: 
    Close an existing GitHub issue.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        issue_number (int): The number of the issue to close.
        owner (str, optional): Repository owner or organization. 
                               Defaults to DEFAULT_OWNER.

    Returns:
        str: Confirmation message.

    Raises:
        RuntimeError: On API errors or unexpected failures.
     This tool is used to close existing issues in a repository.

list_repo_files: 
    List all file paths in a given GitHub repository.

    :param repo: Repository name (e.g., 'Hello-World')
    :param branch: Branch name (default: 'main')
    :param owner: Owner of the repository (default: DEFAULT_OWNER)
    :param token: GitHub access token (recommended for private or high rate limit usage)
    :return: List of file paths
    

update_file_content: Creates or updates a file in a repository with the given content. Used for creating or updating files like README.md. This tool is used to create or update files in a repository, including README files.

delegate_to_repo_agent: Delegates a repository-related task to the RepoAgent which specializes in creating and managing repositories.

delegate_to_issues_agent: Delegates an issue-related task to the IssuesAgent which specializes in creating, managing, and closing issues.

delegate_to_content_agent: Delegates a content-related task to the ContentAgent which specializes in creating, reading, and modifying files and content.

delegate_to_search_agent: Delegates a search-related task to the SearchAgent which specializes in searching for repositories, issues, and other GitHub entities.
"
"
        You are a GitHub operations controller. Your job is to:
        1. Analyze the user's request to understand what they need
        2. Determine which specialized agent(s) should handle the request
        3. Delegate the relevant parts of the request to those agents
        4. Synthesize the results into a coherent response

        Available agents:
        - RepoAgent: Repository creation and management
        - IssuesAgent: Issue and PR tracking and management
        - ContentAgent: File content operations and management
        - SearchAgent: Searching GitHub repositories, issues, and PRs

        Use the appropriate delegation function for each agent.
        

User request: 
You are the Controller Agent for a GitHub operations system that orchestrates multiple specialized agents.

Your responsibilities:
1. Analyze user requests to determine which specialized agent(s) should handle them
2. Break down complex requests into sub-tasks for different agents
3. Coordinate the flow of information between agents
4. Synthesize responses from multiple agents into coherent answers

Available specialized agents:

1. RepoAgent
   - Capabilities: List repositories, create repositories, list commits
   - When to use: For repository management operations

2. IssuesAgent
   - Capabilities: List issues, create issues, close issues, list PRs, create PRs
   - When to use: For issue and pull request operations

3. ContentAgent
   - Capabilities: Read file content, update file content, list repository files
   - When to use: For operations involving file contents

4. SearchAgent
   - Capabilities: Search repositories, search issues
   - When to use: For search operations across GitHub

Decision making guidelines:
- Route requests to the most appropriate specialized agent based on the operation needed
- For complex requests, break them down and delegate parts to different agents
- When multiple agents are needed, coordinate the sequence of operations
- Provide clear context when delegating to an agent

Always maintain a helpful and informative tone with the user, even when handling errors.


User request: Create a repository under my github account puranjaigarg783 of the same as that of a battlestar galactica character. If a repository of the name of a star trek character already exists, chosse a different one, create an issue for adding a README for creating a calculator then commit code and readme for it close the issue after.",The ContentAgent reached max iterations. This likely means it was unable to complete the file creation and content addition. I will try delegating the creation of the README and calculator.py files separately.,delegate_to_content_agent,"{'query': 'In the puranjaigarg783/Starbuck repository, create a README.md file with the content ""This repository contains a basic calculator implementation.""'}","
list_my_repos: Return the full names (""owner/repo"") of all repos visible to the user.

read_file: Fetch a text/binary file and return its decoded content as str.

commit_file: Create or update *path* with *content* and return the new blob SHA. This tool is used to commit code or text files to a repository.

list_issues: 
    Retrieve all issues from a GitHub repository.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        owner (str, optional): Repository owner. Defaults to DEFAULT_OWNER.
        state (str, optional): Issue state filter: ""open"", ""closed"", or ""all"". Defaults to ""open"".

    Returns:
        List[Dict[str, Union[int, str]]]: A list of dicts each with:
            - number (int): Issue number
            - title (str): Issue title

    Raises:
        RuntimeError: On API errors or unexpected failures.
    

open_issue: Create a new issue and return its number. This tool is used to create new issues in a repository.

list_prs: Return pull requests matching *state* (and optional *base*).

create_pr: Create a pull request and return its number.

list_commits: Return commit SHAs for *branch* (limited by *per_page*).

search_repos: Search repositories and return their full names.

search_issues: Search issues/PRs and return their numbers.

create_repo: Create a new repository and return its full name. This tool is used to create a new GitHub repository.

close_issue: 
    Close an existing GitHub issue.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        issue_number (int): The number of the issue to close.
        owner (str, optional): Repository owner or organization. 
                               Defaults to DEFAULT_OWNER.

    Returns:
        str: Confirmation message.

    Raises:
        RuntimeError: On API errors or unexpected failures.
     This tool is used to close existing issues in a repository.

list_repo_files: 
    List all file paths in a given GitHub repository.

    :param repo: Repository name (e.g., 'Hello-World')
    :param branch: Branch name (default: 'main')
    :param owner: Owner of the repository (default: DEFAULT_OWNER)
    :param token: GitHub access token (recommended for private or high rate limit usage)
    :return: List of file paths
    

update_file_content: Creates or updates a file in a repository with the given content. Used for creating or updating files like README.md. This tool is used to create or update files in a repository, including README files.

delegate_to_repo_agent: Delegates a repository-related task to the RepoAgent which specializes in creating and managing repositories.

delegate_to_issues_agent: Delegates an issue-related task to the IssuesAgent which specializes in creating, managing, and closing issues.

delegate_to_content_agent: Delegates a content-related task to the ContentAgent which specializes in creating, reading, and modifying files and content.

delegate_to_search_agent: Delegates a search-related task to the SearchAgent which specializes in searching for repositories, issues, and other GitHub entities.
"
"In the puranjaigarg783/Starbuck repository, create a README.md file with the content ""This repository contains a basic calculator implementation.""",The user wants me to create a README.md file in the specified repository with the given content. I can use the update_file_content tool to achieve this.,update_file_content,"{""repo"": ""Starbuck"", ""path"": ""README.md"", ""message"": ""Create README.md"", ""content"": ""This repository contains a basic calculator implementation."", ""owner"": ""puranjaigarg783""} ```","
list_my_repos: Return the full names (""owner/repo"") of all repos visible to the user.

read_file: Fetch a text/binary file and return its decoded content as str.

commit_file: Create or update *path* with *content* and return the new blob SHA. This tool is used to commit code or text files to a repository.

list_issues: 
    Retrieve all issues from a GitHub repository.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        owner (str, optional): Repository owner. Defaults to DEFAULT_OWNER.
        state (str, optional): Issue state filter: ""open"", ""closed"", or ""all"". Defaults to ""open"".

    Returns:
        List[Dict[str, Union[int, str]]]: A list of dicts each with:
            - number (int): Issue number
            - title (str): Issue title

    Raises:
        RuntimeError: On API errors or unexpected failures.
    

open_issue: Create a new issue and return its number. This tool is used to create new issues in a repository.

list_prs: Return pull requests matching *state* (and optional *base*).

create_pr: Create a pull request and return its number.

list_commits: Return commit SHAs for *branch* (limited by *per_page*).

search_repos: Search repositories and return their full names.

search_issues: Search issues/PRs and return their numbers.

create_repo: Create a new repository and return its full name. This tool is used to create a new GitHub repository.

close_issue: 
    Close an existing GitHub issue.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        issue_number (int): The number of the issue to close.
        owner (str, optional): Repository owner or organization. 
                               Defaults to DEFAULT_OWNER.

    Returns:
        str: Confirmation message.

    Raises:
        RuntimeError: On API errors or unexpected failures.
     This tool is used to close existing issues in a repository.

list_repo_files: 
    List all file paths in a given GitHub repository.

    :param repo: Repository name (e.g., 'Hello-World')
    :param branch: Branch name (default: 'main')
    :param owner: Owner of the repository (default: DEFAULT_OWNER)
    :param token: GitHub access token (recommended for private or high rate limit usage)
    :return: List of file paths
    

update_file_content: Creates or updates a file in a repository with the given content. Used for creating or updating files like README.md. This tool is used to create or update files in a repository, including README files.

delegate_to_repo_agent: Delegates a repository-related task to the RepoAgent which specializes in creating and managing repositories.

delegate_to_issues_agent: Delegates an issue-related task to the IssuesAgent which specializes in creating, managing, and closing issues.

delegate_to_content_agent: Delegates a content-related task to the ContentAgent which specializes in creating, reading, and modifying files and content.

delegate_to_search_agent: Delegates a search-related task to the SearchAgent which specializes in searching for repositories, issues, and other GitHub entities.
"
"
        You are a GitHub operations controller. Your job is to:
        1. Analyze the user's request to understand what they need
        2. Determine which specialized agent(s) should handle the request
        3. Delegate the relevant parts of the request to those agents
        4. Synthesize the results into a coherent response

        Available agents:
        - RepoAgent: Repository creation and management
        - IssuesAgent: Issue and PR tracking and management
        - ContentAgent: File content operations and management
        - SearchAgent: Searching GitHub repositories, issues, and PRs

        Use the appropriate delegation function for each agent.
        

User request: 
You are the Controller Agent for a GitHub operations system that orchestrates multiple specialized agents.

Your responsibilities:
1. Analyze user requests to determine which specialized agent(s) should handle them
2. Break down complex requests into sub-tasks for different agents
3. Coordinate the flow of information between agents
4. Synthesize responses from multiple agents into coherent answers

Available specialized agents:

1. RepoAgent
   - Capabilities: List repositories, create repositories, list commits
   - When to use: For repository management operations

2. IssuesAgent
   - Capabilities: List issues, create issues, close issues, list PRs, create PRs
   - When to use: For issue and pull request operations

3. ContentAgent
   - Capabilities: Read file content, update file content, list repository files
   - When to use: For operations involving file contents

4. SearchAgent
   - Capabilities: Search repositories, search issues
   - When to use: For search operations across GitHub

Decision making guidelines:
- Route requests to the most appropriate specialized agent based on the operation needed
- For complex requests, break them down and delegate parts to different agents
- When multiple agents are needed, coordinate the sequence of operations
- Provide clear context when delegating to an agent

Always maintain a helpful and informative tone with the user, even when handling errors.


User request: Create a repository under my github account puranjaigarg783 of the same as that of a battlestar galactica character. If a repository of the name of a star trek character already exists, chosse a different one, create an issue for adding a README for creating a calculator then commit code and readme for it close the issue after.","Now that the README.md file has been created, I will delegate the creation of the calculator.py file to the ContentAgent.",delegate_to_content_agent,"{'query': 'In the puranjaigarg783/Starbuck repository, create a calculator.py file with the content ""def add(x, y):\n return x + y\n\ndef subtract(x, y):\n return x - y\n\nprint(add(1, 2))\nprint(subtract(4, 2))""'}","
list_my_repos: Return the full names (""owner/repo"") of all repos visible to the user.

read_file: Fetch a text/binary file and return its decoded content as str.

commit_file: Create or update *path* with *content* and return the new blob SHA. This tool is used to commit code or text files to a repository.

list_issues: 
    Retrieve all issues from a GitHub repository.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        owner (str, optional): Repository owner. Defaults to DEFAULT_OWNER.
        state (str, optional): Issue state filter: ""open"", ""closed"", or ""all"". Defaults to ""open"".

    Returns:
        List[Dict[str, Union[int, str]]]: A list of dicts each with:
            - number (int): Issue number
            - title (str): Issue title

    Raises:
        RuntimeError: On API errors or unexpected failures.
    

open_issue: Create a new issue and return its number. This tool is used to create new issues in a repository.

list_prs: Return pull requests matching *state* (and optional *base*).

create_pr: Create a pull request and return its number.

list_commits: Return commit SHAs for *branch* (limited by *per_page*).

search_repos: Search repositories and return their full names.

search_issues: Search issues/PRs and return their numbers.

create_repo: Create a new repository and return its full name. This tool is used to create a new GitHub repository.

close_issue: 
    Close an existing GitHub issue.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        issue_number (int): The number of the issue to close.
        owner (str, optional): Repository owner or organization. 
                               Defaults to DEFAULT_OWNER.

    Returns:
        str: Confirmation message.

    Raises:
        RuntimeError: On API errors or unexpected failures.
     This tool is used to close existing issues in a repository.

list_repo_files: 
    List all file paths in a given GitHub repository.

    :param repo: Repository name (e.g., 'Hello-World')
    :param branch: Branch name (default: 'main')
    :param owner: Owner of the repository (default: DEFAULT_OWNER)
    :param token: GitHub access token (recommended for private or high rate limit usage)
    :return: List of file paths
    

update_file_content: Creates or updates a file in a repository with the given content. Used for creating or updating files like README.md. This tool is used to create or update files in a repository, including README files.

delegate_to_repo_agent: Delegates a repository-related task to the RepoAgent which specializes in creating and managing repositories.

delegate_to_issues_agent: Delegates an issue-related task to the IssuesAgent which specializes in creating, managing, and closing issues.

delegate_to_content_agent: Delegates a content-related task to the ContentAgent which specializes in creating, reading, and modifying files and content.

delegate_to_search_agent: Delegates a search-related task to the SearchAgent which specializes in searching for repositories, issues, and other GitHub entities.
"
"In the puranjaigarg783/Starbuck repository, create a README.md file with the content ""This repository contains a basic calculator implementation.""",I have created the calculator.py file in the puranjaigarg783/Starbuck repository with the content provided.,update_file_content,"{""repo"": ""Starbuck"", ""path"": ""calculator.py"", ""message"": ""Create calculator.py"", ""content"": ""def add(x, y):\n return x + y\n\ndef subtract(x, y):\n return x - y\n\nprint(add(1, 2))\nprint(subtract(4, 2))"", ""owner"": ""puranjaigarg783""} ```","
list_my_repos: Return the full names (""owner/repo"") of all repos visible to the user.

read_file: Fetch a text/binary file and return its decoded content as str.

commit_file: Create or update *path* with *content* and return the new blob SHA. This tool is used to commit code or text files to a repository.

list_issues: 
    Retrieve all issues from a GitHub repository.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        owner (str, optional): Repository owner. Defaults to DEFAULT_OWNER.
        state (str, optional): Issue state filter: ""open"", ""closed"", or ""all"". Defaults to ""open"".

    Returns:
        List[Dict[str, Union[int, str]]]: A list of dicts each with:
            - number (int): Issue number
            - title (str): Issue title

    Raises:
        RuntimeError: On API errors or unexpected failures.
    

open_issue: Create a new issue and return its number. This tool is used to create new issues in a repository.

list_prs: Return pull requests matching *state* (and optional *base*).

create_pr: Create a pull request and return its number.

list_commits: Return commit SHAs for *branch* (limited by *per_page*).

search_repos: Search repositories and return their full names.

search_issues: Search issues/PRs and return their numbers.

create_repo: Create a new repository and return its full name. This tool is used to create a new GitHub repository.

close_issue: 
    Close an existing GitHub issue.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        issue_number (int): The number of the issue to close.
        owner (str, optional): Repository owner or organization. 
                               Defaults to DEFAULT_OWNER.

    Returns:
        str: Confirmation message.

    Raises:
        RuntimeError: On API errors or unexpected failures.
     This tool is used to close existing issues in a repository.

list_repo_files: 
    List all file paths in a given GitHub repository.

    :param repo: Repository name (e.g., 'Hello-World')
    :param branch: Branch name (default: 'main')
    :param owner: Owner of the repository (default: DEFAULT_OWNER)
    :param token: GitHub access token (recommended for private or high rate limit usage)
    :return: List of file paths
    

update_file_content: Creates or updates a file in a repository with the given content. Used for creating or updating files like README.md. This tool is used to create or update files in a repository, including README files.

delegate_to_repo_agent: Delegates a repository-related task to the RepoAgent which specializes in creating and managing repositories.

delegate_to_issues_agent: Delegates an issue-related task to the IssuesAgent which specializes in creating, managing, and closing issues.

delegate_to_content_agent: Delegates a content-related task to the ContentAgent which specializes in creating, reading, and modifying files and content.

delegate_to_search_agent: Delegates a search-related task to the SearchAgent which specializes in searching for repositories, issues, and other GitHub entities.
"
"
        You are a GitHub operations controller. Your job is to:
        1. Analyze the user's request to understand what they need
        2. Determine which specialized agent(s) should handle the request
        3. Delegate the relevant parts of the request to those agents
        4. Synthesize the results into a coherent response

        Available agents:
        - RepoAgent: Repository creation and management
        - IssuesAgent: Issue and PR tracking and management
        - ContentAgent: File content operations and management
        - SearchAgent: Searching GitHub repositories, issues, and PRs

        Use the appropriate delegation function for each agent.
        

User request: 
You are the Controller Agent for a GitHub operations system that orchestrates multiple specialized agents.

Your responsibilities:
1. Analyze user requests to determine which specialized agent(s) should handle them
2. Break down complex requests into sub-tasks for different agents
3. Coordinate the flow of information between agents
4. Synthesize responses from multiple agents into coherent answers

Available specialized agents:

1. RepoAgent
   - Capabilities: List repositories, create repositories, list commits
   - When to use: For repository management operations

2. IssuesAgent
   - Capabilities: List issues, create issues, close issues, list PRs, create PRs
   - When to use: For issue and pull request operations

3. ContentAgent
   - Capabilities: Read file content, update file content, list repository files
   - When to use: For operations involving file contents

4. SearchAgent
   - Capabilities: Search repositories, search issues
   - When to use: For search operations across GitHub

Decision making guidelines:
- Route requests to the most appropriate specialized agent based on the operation needed
- For complex requests, break them down and delegate parts to different agents
- When multiple agents are needed, coordinate the sequence of operations
- Provide clear context when delegating to an agent

Always maintain a helpful and informative tone with the user, even when handling errors.


User request: Create a repository under my github account puranjaigarg783 of the same as that of a battlestar galactica character. If a repository of the name of a star trek character already exists, chosse a different one, create an issue for adding a README for creating a calculator then commit code and readme for it close the issue after.","Now that the README and calculator files have been created, I will delegate the task of closing the issue to the IssuesAgent.",delegate_to_issues_agent,{'query': 'Close issue number 1 in the puranjaigarg783/Starbuck repository.'},"
list_my_repos: Return the full names (""owner/repo"") of all repos visible to the user.

read_file: Fetch a text/binary file and return its decoded content as str.

commit_file: Create or update *path* with *content* and return the new blob SHA. This tool is used to commit code or text files to a repository.

list_issues: 
    Retrieve all issues from a GitHub repository.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        owner (str, optional): Repository owner. Defaults to DEFAULT_OWNER.
        state (str, optional): Issue state filter: ""open"", ""closed"", or ""all"". Defaults to ""open"".

    Returns:
        List[Dict[str, Union[int, str]]]: A list of dicts each with:
            - number (int): Issue number
            - title (str): Issue title

    Raises:
        RuntimeError: On API errors or unexpected failures.
    

open_issue: Create a new issue and return its number. This tool is used to create new issues in a repository.

list_prs: Return pull requests matching *state* (and optional *base*).

create_pr: Create a pull request and return its number.

list_commits: Return commit SHAs for *branch* (limited by *per_page*).

search_repos: Search repositories and return their full names.

search_issues: Search issues/PRs and return their numbers.

create_repo: Create a new repository and return its full name. This tool is used to create a new GitHub repository.

close_issue: 
    Close an existing GitHub issue.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        issue_number (int): The number of the issue to close.
        owner (str, optional): Repository owner or organization. 
                               Defaults to DEFAULT_OWNER.

    Returns:
        str: Confirmation message.

    Raises:
        RuntimeError: On API errors or unexpected failures.
     This tool is used to close existing issues in a repository.

list_repo_files: 
    List all file paths in a given GitHub repository.

    :param repo: Repository name (e.g., 'Hello-World')
    :param branch: Branch name (default: 'main')
    :param owner: Owner of the repository (default: DEFAULT_OWNER)
    :param token: GitHub access token (recommended for private or high rate limit usage)
    :return: List of file paths
    

update_file_content: Creates or updates a file in a repository with the given content. Used for creating or updating files like README.md. This tool is used to create or update files in a repository, including README files.

delegate_to_repo_agent: Delegates a repository-related task to the RepoAgent which specializes in creating and managing repositories.

delegate_to_issues_agent: Delegates an issue-related task to the IssuesAgent which specializes in creating, managing, and closing issues.

delegate_to_content_agent: Delegates a content-related task to the ContentAgent which specializes in creating, reading, and modifying files and content.

delegate_to_search_agent: Delegates a search-related task to the SearchAgent which specializes in searching for repositories, issues, and other GitHub entities.
"
"Create an issue in the puranjaigarg783/Starbuck repository with the title ""Add README and calculator functionality"" and body ""Create a README file and implement basic calculator functionality.""",The user wants me to close issue number 1 in the puranjaigarg783/Starbuck repository. I will use the close_issue tool to do this.,close_issue,"{""repo"": ""Starbuck"", ""issue_number"": 1, ""owner"": ""puranjaigarg783""} ```","
list_my_repos: Return the full names (""owner/repo"") of all repos visible to the user.

read_file: Fetch a text/binary file and return its decoded content as str.

commit_file: Create or update *path* with *content* and return the new blob SHA. This tool is used to commit code or text files to a repository.

list_issues: 
    Retrieve all issues from a GitHub repository.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        owner (str, optional): Repository owner. Defaults to DEFAULT_OWNER.
        state (str, optional): Issue state filter: ""open"", ""closed"", or ""all"". Defaults to ""open"".

    Returns:
        List[Dict[str, Union[int, str]]]: A list of dicts each with:
            - number (int): Issue number
            - title (str): Issue title

    Raises:
        RuntimeError: On API errors or unexpected failures.
    

open_issue: Create a new issue and return its number. This tool is used to create new issues in a repository.

list_prs: Return pull requests matching *state* (and optional *base*).

create_pr: Create a pull request and return its number.

list_commits: Return commit SHAs for *branch* (limited by *per_page*).

search_repos: Search repositories and return their full names.

search_issues: Search issues/PRs and return their numbers.

create_repo: Create a new repository and return its full name. This tool is used to create a new GitHub repository.

close_issue: 
    Close an existing GitHub issue.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        issue_number (int): The number of the issue to close.
        owner (str, optional): Repository owner or organization. 
                               Defaults to DEFAULT_OWNER.

    Returns:
        str: Confirmation message.

    Raises:
        RuntimeError: On API errors or unexpected failures.
     This tool is used to close existing issues in a repository.

list_repo_files: 
    List all file paths in a given GitHub repository.

    :param repo: Repository name (e.g., 'Hello-World')
    :param branch: Branch name (default: 'main')
    :param owner: Owner of the repository (default: DEFAULT_OWNER)
    :param token: GitHub access token (recommended for private or high rate limit usage)
    :return: List of file paths
    

update_file_content: Creates or updates a file in a repository with the given content. Used for creating or updating files like README.md. This tool is used to create or update files in a repository, including README files.

delegate_to_repo_agent: Delegates a repository-related task to the RepoAgent which specializes in creating and managing repositories.

delegate_to_issues_agent: Delegates an issue-related task to the IssuesAgent which specializes in creating, managing, and closing issues.

delegate_to_content_agent: Delegates a content-related task to the ContentAgent which specializes in creating, reading, and modifying files and content.

delegate_to_search_agent: Delegates a search-related task to the SearchAgent which specializes in searching for repositories, issues, and other GitHub entities.
"
"Create an issue in the puranjaigarg783/Picard repository with the title ""Add README and create a calculator"".",The current language of the user is: English. I need to use a tool to help me answer the question.,close_issue,"{""repo"": ""Picard"", ""issue_number"": 1, ""owner"": ""puranjaigarg783""} ```","
list_my_repos: Return the full names (""owner/repo"") of all repos visible to the user.

read_file: Fetch a text/binary file and return its decoded content as str.

commit_file: Create or update *path* with *content* and return the new blob SHA. This tool is used to commit code or text files to a repository.

list_issues: 
    Retrieve all issues from a GitHub repository.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        owner (str, optional): Repository owner. Defaults to DEFAULT_OWNER.
        state (str, optional): Issue state filter: ""open"", ""closed"", or ""all"". Defaults to ""open"".

    Returns:
        List[Dict[str, Union[int, str]]]: A list of dicts each with:
            - number (int): Issue number
            - title (str): Issue title

    Raises:
        RuntimeError: On API errors or unexpected failures.
    

open_issue: Create a new issue and return its number. This tool is used to create new issues in a repository.

list_prs: Return pull requests matching *state* (and optional *base*).

create_pr: Create a pull request and return its number.

list_commits: Return commit SHAs for *branch* (limited by *per_page*).

search_repos: Search repositories and return their full names.

search_issues: Search issues/PRs and return their numbers.

create_repo: Create a new repository and return its full name. This tool is used to create a new GitHub repository.

close_issue: 
    Close an existing GitHub issue.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        issue_number (int): The number of the issue to close.
        owner (str, optional): Repository owner or organization. 
                               Defaults to DEFAULT_OWNER.

    Returns:
        str: Confirmation message.

    Raises:
        RuntimeError: On API errors or unexpected failures.
     This tool is used to close existing issues in a repository.

list_repo_files: 
    List all file paths in a given GitHub repository.

    :param repo: Repository name (e.g., 'Hello-World')
    :param branch: Branch name (default: 'main')
    :param owner: Owner of the repository (default: DEFAULT_OWNER)
    :param token: GitHub access token (recommended for private or high rate limit usage)
    :return: List of file paths
    

update_file_content: Creates or updates a file in a repository with the given content. Used for creating or updating files like README.md. This tool is used to create or update files in a repository, including README files.

delegate_to_repo_agent: Delegates a repository-related task to the RepoAgent which specializes in creating and managing repositories.

delegate_to_issues_agent: Delegates an issue-related task to the IssuesAgent which specializes in creating, managing, and closing issues.

delegate_to_content_agent: Delegates a content-related task to the ContentAgent which specializes in creating, reading, and modifying files and content.

delegate_to_search_agent: Delegates a search-related task to the SearchAgent which specializes in searching for repositories, issues, and other GitHub entities.
"
"
        You are a GitHub operations controller. Your job is to:
        1. Analyze the user's request to understand what they need
        2. Determine which specialized agent(s) should handle the request
        3. Delegate the relevant parts of the request to those agents
        4. Synthesize the results into a coherent response

        Available agents:
        - RepoAgent: Repository creation and management
        - IssuesAgent: Issue and PR tracking and management
        - ContentAgent: File content operations and management
        - SearchAgent: Searching GitHub repositories, issues, and PRs

        Use the appropriate delegation function for each agent.
        

User request: 
You are the Controller Agent for a GitHub operations system that orchestrates multiple specialized agents.

Your responsibilities:
1. Analyze user requests to determine which specialized agent(s) should handle them
2. Break down complex requests into sub-tasks for different agents
3. Coordinate the flow of information between agents
4. Synthesize responses from multiple agents into coherent answers

Available specialized agents:

1. RepoAgent
   - Capabilities: List repositories, create repositories, list commits
   - When to use: For repository management operations

2. IssuesAgent
   - Capabilities: List issues, create issues, close issues, list PRs, create PRs
   - When to use: For issue and pull request operations

3. ContentAgent
   - Capabilities: Read file content, update file content, list repository files
   - When to use: For operations involving file contents

4. SearchAgent
   - Capabilities: Search repositories, search issues
   - When to use: For search operations across GitHub

Decision making guidelines:
- Route requests to the most appropriate specialized agent based on the operation needed
- For complex requests, break them down and delegate parts to different agents
- When multiple agents are needed, coordinate the sequence of operations
- Provide clear context when delegating to an agent

Always maintain a helpful and informative tone with the user, even when handling errors.


User request: Create a repository under my github account puranjaigarg783 of the same as that of a star trek character. If a repository of the name of a star trek character already exists, chosse a different one, create an issue for adding a README for creating a calculator then commit code and readme for it close the issue after.","The user is asking to create a repository, create an issue, commit code and readme, and close the issue. This involves multiple agents. I'll need to use the RepoAgent to create the repository, the IssuesAgent to create and close the issue, and the ContentAgent to commit the code and readme. I'll start by asking the RepoAgent to create the repository.",delegate_to_repo_agent,"{""query"": ""Create a repository under the puranjaigarg783 account with the name of a Star Trek character. If a repository with that name already exists, choose a different Star Trek character name.""}","
list_my_repos: Return the full names (""owner/repo"") of all repos visible to the user.

read_file: Fetch a text/binary file and return its decoded content as str.

commit_file: Create or update *path* with *content* and return the new blob SHA. This tool is used to commit code or text files to a repository.

list_issues: 
    Retrieve all issues from a GitHub repository.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        owner (str, optional): Repository owner. Defaults to DEFAULT_OWNER.
        state (str, optional): Issue state filter: ""open"", ""closed"", or ""all"". Defaults to ""open"".

    Returns:
        List[Dict[str, Union[int, str]]]: A list of dicts each with:
            - number (int): Issue number
            - title (str): Issue title

    Raises:
        RuntimeError: On API errors or unexpected failures.
    

open_issue: Create a new issue and return its number. This tool is used to create new issues in a repository.

list_prs: Return pull requests matching *state* (and optional *base*).

create_pr: Create a pull request and return its number.

list_commits: Return commit SHAs for *branch* (limited by *per_page*).

search_repos: Search repositories and return their full names.

search_issues: Search issues/PRs and return their numbers.

create_repo: Create a new repository and return its full name. This tool is used to create a new GitHub repository.

close_issue: 
    Close an existing GitHub issue.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        issue_number (int): The number of the issue to close.
        owner (str, optional): Repository owner or organization. 
                               Defaults to DEFAULT_OWNER.

    Returns:
        str: Confirmation message.

    Raises:
        RuntimeError: On API errors or unexpected failures.
     This tool is used to close existing issues in a repository.

list_repo_files: 
    List all file paths in a given GitHub repository.

    :param repo: Repository name (e.g., 'Hello-World')
    :param branch: Branch name (default: 'main')
    :param owner: Owner of the repository (default: DEFAULT_OWNER)
    :param token: GitHub access token (recommended for private or high rate limit usage)
    :return: List of file paths
    

update_file_content: Creates or updates a file in a repository with the given content. Used for creating or updating files like README.md. This tool is used to create or update files in a repository, including README files.

delegate_to_repo_agent: Delegates a repository-related task to the RepoAgent which specializes in creating and managing repositories.

delegate_to_issues_agent: Delegates an issue-related task to the IssuesAgent which specializes in creating, managing, and closing issues.

delegate_to_content_agent: Delegates a content-related task to the ContentAgent which specializes in creating, reading, and modifying files and content.

delegate_to_search_agent: Delegates a search-related task to the SearchAgent which specializes in searching for repositories, issues, and other GitHub entities.
"
"Create a repository under the puranjaigarg783 account with the name of a Star Trek character. If a repository with that name already exists, choose a different Star Trek character name.","The current language of the user is: English. I need to use the create_repository tool to create a new repository. I will start with the name ""Picard"" and if that fails, I will try another name.",create_repository,"{""name"": ""Picard""}","
list_my_repos: Return the full names (""owner/repo"") of all repos visible to the user.

read_file: Fetch a text/binary file and return its decoded content as str.

commit_file: Create or update *path* with *content* and return the new blob SHA. This tool is used to commit code or text files to a repository.

list_issues: 
    Retrieve all issues from a GitHub repository.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        owner (str, optional): Repository owner. Defaults to DEFAULT_OWNER.
        state (str, optional): Issue state filter: ""open"", ""closed"", or ""all"". Defaults to ""open"".

    Returns:
        List[Dict[str, Union[int, str]]]: A list of dicts each with:
            - number (int): Issue number
            - title (str): Issue title

    Raises:
        RuntimeError: On API errors or unexpected failures.
    

open_issue: Create a new issue and return its number. This tool is used to create new issues in a repository.

list_prs: Return pull requests matching *state* (and optional *base*).

create_pr: Create a pull request and return its number.

list_commits: Return commit SHAs for *branch* (limited by *per_page*).

search_repos: Search repositories and return their full names.

search_issues: Search issues/PRs and return their numbers.

create_repo: Create a new repository and return its full name. This tool is used to create a new GitHub repository.

close_issue: 
    Close an existing GitHub issue.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        issue_number (int): The number of the issue to close.
        owner (str, optional): Repository owner or organization. 
                               Defaults to DEFAULT_OWNER.

    Returns:
        str: Confirmation message.

    Raises:
        RuntimeError: On API errors or unexpected failures.
     This tool is used to close existing issues in a repository.

list_repo_files: 
    List all file paths in a given GitHub repository.

    :param repo: Repository name (e.g., 'Hello-World')
    :param branch: Branch name (default: 'main')
    :param owner: Owner of the repository (default: DEFAULT_OWNER)
    :param token: GitHub access token (recommended for private or high rate limit usage)
    :return: List of file paths
    

update_file_content: Creates or updates a file in a repository with the given content. Used for creating or updating files like README.md. This tool is used to create or update files in a repository, including README files.

delegate_to_repo_agent: Delegates a repository-related task to the RepoAgent which specializes in creating and managing repositories.

delegate_to_issues_agent: Delegates an issue-related task to the IssuesAgent which specializes in creating, managing, and closing issues.

delegate_to_content_agent: Delegates a content-related task to the ContentAgent which specializes in creating, reading, and modifying files and content.

delegate_to_search_agent: Delegates a search-related task to the SearchAgent which specializes in searching for repositories, issues, and other GitHub entities.
"
"
        You are a GitHub operations controller. Your job is to:
        1. Analyze the user's request to understand what they need
        2. Determine which specialized agent(s) should handle the request
        3. Delegate the relevant parts of the request to those agents
        4. Synthesize the results into a coherent response

        Available agents:
        - RepoAgent: Repository creation and management
        - IssuesAgent: Issue and PR tracking and management
        - ContentAgent: File content operations and management
        - SearchAgent: Searching GitHub repositories, issues, and PRs

        Use the appropriate delegation function for each agent.
        

User request: 
You are the Controller Agent for a GitHub operations system that orchestrates multiple specialized agents.

Your responsibilities:
1. Analyze user requests to determine which specialized agent(s) should handle them
2. Break down complex requests into sub-tasks for different agents
3. Coordinate the flow of information between agents
4. Synthesize responses from multiple agents into coherent answers

Available specialized agents:

1. RepoAgent
   - Capabilities: List repositories, create repositories, list commits
   - When to use: For repository management operations

2. IssuesAgent
   - Capabilities: List issues, create issues, close issues, list PRs, create PRs
   - When to use: For issue and pull request operations

3. ContentAgent
   - Capabilities: Read file content, update file content, list repository files
   - When to use: For operations involving file contents

4. SearchAgent
   - Capabilities: Search repositories, search issues
   - When to use: For search operations across GitHub

Decision making guidelines:
- Route requests to the most appropriate specialized agent based on the operation needed
- For complex requests, break them down and delegate parts to different agents
- When multiple agents are needed, coordinate the sequence of operations
- Provide clear context when delegating to an agent

Always maintain a helpful and informative tone with the user, even when handling errors.


User request: Create a repository under my github account puranjaigarg783 of the same as that of a star trek character. If a repository of the name of a star trek character already exists, chosse a different one, create an issue for adding a README for creating a calculator then commit code and readme for it close the issue after.","Now that the repository has been created, I need to create an issue for adding a README and creating a calculator. I'll delegate this to the IssuesAgent.",delegate_to_issues_agent,"{'query': 'Create an issue in the puranjaigarg783/Picard repository with the title ""Add README and create a calculator"".'}","
list_my_repos: Return the full names (""owner/repo"") of all repos visible to the user.

read_file: Fetch a text/binary file and return its decoded content as str.

commit_file: Create or update *path* with *content* and return the new blob SHA. This tool is used to commit code or text files to a repository.

list_issues: 
    Retrieve all issues from a GitHub repository.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        owner (str, optional): Repository owner. Defaults to DEFAULT_OWNER.
        state (str, optional): Issue state filter: ""open"", ""closed"", or ""all"". Defaults to ""open"".

    Returns:
        List[Dict[str, Union[int, str]]]: A list of dicts each with:
            - number (int): Issue number
            - title (str): Issue title

    Raises:
        RuntimeError: On API errors or unexpected failures.
    

open_issue: Create a new issue and return its number. This tool is used to create new issues in a repository.

list_prs: Return pull requests matching *state* (and optional *base*).

create_pr: Create a pull request and return its number.

list_commits: Return commit SHAs for *branch* (limited by *per_page*).

search_repos: Search repositories and return their full names.

search_issues: Search issues/PRs and return their numbers.

create_repo: Create a new repository and return its full name. This tool is used to create a new GitHub repository.

close_issue: 
    Close an existing GitHub issue.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        issue_number (int): The number of the issue to close.
        owner (str, optional): Repository owner or organization. 
                               Defaults to DEFAULT_OWNER.

    Returns:
        str: Confirmation message.

    Raises:
        RuntimeError: On API errors or unexpected failures.
     This tool is used to close existing issues in a repository.

list_repo_files: 
    List all file paths in a given GitHub repository.

    :param repo: Repository name (e.g., 'Hello-World')
    :param branch: Branch name (default: 'main')
    :param owner: Owner of the repository (default: DEFAULT_OWNER)
    :param token: GitHub access token (recommended for private or high rate limit usage)
    :return: List of file paths
    

update_file_content: Creates or updates a file in a repository with the given content. Used for creating or updating files like README.md. This tool is used to create or update files in a repository, including README files.

delegate_to_repo_agent: Delegates a repository-related task to the RepoAgent which specializes in creating and managing repositories.

delegate_to_issues_agent: Delegates an issue-related task to the IssuesAgent which specializes in creating, managing, and closing issues.

delegate_to_content_agent: Delegates a content-related task to the ContentAgent which specializes in creating, reading, and modifying files and content.

delegate_to_search_agent: Delegates a search-related task to the SearchAgent which specializes in searching for repositories, issues, and other GitHub entities.
"
"Create an issue in the puranjaigarg783/Picard repository with the title ""Add README and create a calculator"".",The user wants me to create an issue in a repository. I should use the create_issue tool for this.,create_issue,"{""repo"": ""Picard"", ""title"": ""Add README and create a calculator"", ""owner"": ""puranjaigarg783""} ```","
list_my_repos: Return the full names (""owner/repo"") of all repos visible to the user.

read_file: Fetch a text/binary file and return its decoded content as str.

commit_file: Create or update *path* with *content* and return the new blob SHA. This tool is used to commit code or text files to a repository.

list_issues: 
    Retrieve all issues from a GitHub repository.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        owner (str, optional): Repository owner. Defaults to DEFAULT_OWNER.
        state (str, optional): Issue state filter: ""open"", ""closed"", or ""all"". Defaults to ""open"".

    Returns:
        List[Dict[str, Union[int, str]]]: A list of dicts each with:
            - number (int): Issue number
            - title (str): Issue title

    Raises:
        RuntimeError: On API errors or unexpected failures.
    

open_issue: Create a new issue and return its number. This tool is used to create new issues in a repository.

list_prs: Return pull requests matching *state* (and optional *base*).

create_pr: Create a pull request and return its number.

list_commits: Return commit SHAs for *branch* (limited by *per_page*).

search_repos: Search repositories and return their full names.

search_issues: Search issues/PRs and return their numbers.

create_repo: Create a new repository and return its full name. This tool is used to create a new GitHub repository.

close_issue: 
    Close an existing GitHub issue.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        issue_number (int): The number of the issue to close.
        owner (str, optional): Repository owner or organization. 
                               Defaults to DEFAULT_OWNER.

    Returns:
        str: Confirmation message.

    Raises:
        RuntimeError: On API errors or unexpected failures.
     This tool is used to close existing issues in a repository.

list_repo_files: 
    List all file paths in a given GitHub repository.

    :param repo: Repository name (e.g., 'Hello-World')
    :param branch: Branch name (default: 'main')
    :param owner: Owner of the repository (default: DEFAULT_OWNER)
    :param token: GitHub access token (recommended for private or high rate limit usage)
    :return: List of file paths
    

update_file_content: Creates or updates a file in a repository with the given content. Used for creating or updating files like README.md. This tool is used to create or update files in a repository, including README files.

delegate_to_repo_agent: Delegates a repository-related task to the RepoAgent which specializes in creating and managing repositories.

delegate_to_issues_agent: Delegates an issue-related task to the IssuesAgent which specializes in creating, managing, and closing issues.

delegate_to_content_agent: Delegates a content-related task to the ContentAgent which specializes in creating, reading, and modifying files and content.

delegate_to_search_agent: Delegates a search-related task to the SearchAgent which specializes in searching for repositories, issues, and other GitHub entities.
"
"
        You are a GitHub operations controller. Your job is to:
        1. Analyze the user's request to understand what they need
        2. Determine which specialized agent(s) should handle the request
        3. Delegate the relevant parts of the request to those agents
        4. Synthesize the results into a coherent response

        Available agents:
        - RepoAgent: Repository creation and management
        - IssuesAgent: Issue and PR tracking and management
        - ContentAgent: File content operations and management
        - SearchAgent: Searching GitHub repositories, issues, and PRs

        Use the appropriate delegation function for each agent.
        

User request: 
You are the Controller Agent for a GitHub operations system that orchestrates multiple specialized agents.

Your responsibilities:
1. Analyze user requests to determine which specialized agent(s) should handle them
2. Break down complex requests into sub-tasks for different agents
3. Coordinate the flow of information between agents
4. Synthesize responses from multiple agents into coherent answers

Available specialized agents:

1. RepoAgent
   - Capabilities: List repositories, create repositories, list commits
   - When to use: For repository management operations

2. IssuesAgent
   - Capabilities: List issues, create issues, close issues, list PRs, create PRs
   - When to use: For issue and pull request operations

3. ContentAgent
   - Capabilities: Read file content, update file content, list repository files
   - When to use: For operations involving file contents

4. SearchAgent
   - Capabilities: Search repositories, search issues
   - When to use: For search operations across GitHub

Decision making guidelines:
- Route requests to the most appropriate specialized agent based on the operation needed
- For complex requests, break them down and delegate parts to different agents
- When multiple agents are needed, coordinate the sequence of operations
- Provide clear context when delegating to an agent

Always maintain a helpful and informative tone with the user, even when handling errors.


User request: Create a repository under my github account puranjaigarg783 of the same as that of a star trek character. If a repository of the name of a star trek character already exists, chosse a different one, create an issue for adding a README for creating a calculator then commit code and readme for it close the issue after.","Now that the issue has been created, I need to commit the code and README. I'll delegate this to the ContentAgent.",delegate_to_content_agent,{'query': 'Commit a README file and calculator code to the puranjaigarg783/Picard repository. The README should describe the calculator. The calculator code should be a simple calculator implementation.'},"
list_my_repos: Return the full names (""owner/repo"") of all repos visible to the user.

read_file: Fetch a text/binary file and return its decoded content as str.

commit_file: Create or update *path* with *content* and return the new blob SHA. This tool is used to commit code or text files to a repository.

list_issues: 
    Retrieve all issues from a GitHub repository.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        owner (str, optional): Repository owner. Defaults to DEFAULT_OWNER.
        state (str, optional): Issue state filter: ""open"", ""closed"", or ""all"". Defaults to ""open"".

    Returns:
        List[Dict[str, Union[int, str]]]: A list of dicts each with:
            - number (int): Issue number
            - title (str): Issue title

    Raises:
        RuntimeError: On API errors or unexpected failures.
    

open_issue: Create a new issue and return its number. This tool is used to create new issues in a repository.

list_prs: Return pull requests matching *state* (and optional *base*).

create_pr: Create a pull request and return its number.

list_commits: Return commit SHAs for *branch* (limited by *per_page*).

search_repos: Search repositories and return their full names.

search_issues: Search issues/PRs and return their numbers.

create_repo: Create a new repository and return its full name. This tool is used to create a new GitHub repository.

close_issue: 
    Close an existing GitHub issue.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        issue_number (int): The number of the issue to close.
        owner (str, optional): Repository owner or organization. 
                               Defaults to DEFAULT_OWNER.

    Returns:
        str: Confirmation message.

    Raises:
        RuntimeError: On API errors or unexpected failures.
     This tool is used to close existing issues in a repository.

list_repo_files: 
    List all file paths in a given GitHub repository.

    :param repo: Repository name (e.g., 'Hello-World')
    :param branch: Branch name (default: 'main')
    :param owner: Owner of the repository (default: DEFAULT_OWNER)
    :param token: GitHub access token (recommended for private or high rate limit usage)
    :return: List of file paths
    

update_file_content: Creates or updates a file in a repository with the given content. Used for creating or updating files like README.md. This tool is used to create or update files in a repository, including README files.

delegate_to_repo_agent: Delegates a repository-related task to the RepoAgent which specializes in creating and managing repositories.

delegate_to_issues_agent: Delegates an issue-related task to the IssuesAgent which specializes in creating, managing, and closing issues.

delegate_to_content_agent: Delegates a content-related task to the ContentAgent which specializes in creating, reading, and modifying files and content.

delegate_to_search_agent: Delegates a search-related task to the SearchAgent which specializes in searching for repositories, issues, and other GitHub entities.
"
Commit a README file and calculator code to the puranjaigarg783/Picard repository. The README should describe the calculator. The calculator code should be a simple calculator implementation.,"The current language of the user is: English. I need to create two files: README.md and calculator.py, and then commit them to the specified repository.",update_file_content,"{""repo"": ""puranjaigarg783/Picard"", ""path"": ""README.md"", ""message"": ""Add README describing the calculator"", ""content"": ""# Simple Calculator\n\nThis is a simple calculator implemented in Python. It supports basic arithmetic operations like addition, subtraction, multiplication, and division."", ""owner"": ""puranjaigarg783""} ```","
list_my_repos: Return the full names (""owner/repo"") of all repos visible to the user.

read_file: Fetch a text/binary file and return its decoded content as str.

commit_file: Create or update *path* with *content* and return the new blob SHA. This tool is used to commit code or text files to a repository.

list_issues: 
    Retrieve all issues from a GitHub repository.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        owner (str, optional): Repository owner. Defaults to DEFAULT_OWNER.
        state (str, optional): Issue state filter: ""open"", ""closed"", or ""all"". Defaults to ""open"".

    Returns:
        List[Dict[str, Union[int, str]]]: A list of dicts each with:
            - number (int): Issue number
            - title (str): Issue title

    Raises:
        RuntimeError: On API errors or unexpected failures.
    

open_issue: Create a new issue and return its number. This tool is used to create new issues in a repository.

list_prs: Return pull requests matching *state* (and optional *base*).

create_pr: Create a pull request and return its number.

list_commits: Return commit SHAs for *branch* (limited by *per_page*).

search_repos: Search repositories and return their full names.

search_issues: Search issues/PRs and return their numbers.

create_repo: Create a new repository and return its full name. This tool is used to create a new GitHub repository.

close_issue: 
    Close an existing GitHub issue.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        issue_number (int): The number of the issue to close.
        owner (str, optional): Repository owner or organization. 
                               Defaults to DEFAULT_OWNER.

    Returns:
        str: Confirmation message.

    Raises:
        RuntimeError: On API errors or unexpected failures.
     This tool is used to close existing issues in a repository.

list_repo_files: 
    List all file paths in a given GitHub repository.

    :param repo: Repository name (e.g., 'Hello-World')
    :param branch: Branch name (default: 'main')
    :param owner: Owner of the repository (default: DEFAULT_OWNER)
    :param token: GitHub access token (recommended for private or high rate limit usage)
    :return: List of file paths
    

update_file_content: Creates or updates a file in a repository with the given content. Used for creating or updating files like README.md. This tool is used to create or update files in a repository, including README files.

delegate_to_repo_agent: Delegates a repository-related task to the RepoAgent which specializes in creating and managing repositories.

delegate_to_issues_agent: Delegates an issue-related task to the IssuesAgent which specializes in creating, managing, and closing issues.

delegate_to_content_agent: Delegates a content-related task to the ContentAgent which specializes in creating, reading, and modifying files and content.

delegate_to_search_agent: Delegates a search-related task to the SearchAgent which specializes in searching for repositories, issues, and other GitHub entities.
"
Commit a README file and calculator code to the puranjaigarg783/Picard repository. The README should describe the calculator. The calculator code should be a simple calculator implementation.,"The current language of the user is: English. The previous attempt to commit the README failed because the repository was not found. I will try again, ensuring the repository name is correct.",update_file_content,"{'repo': 'puranjaigarg783/Picard', 'path': 'README.md', 'message': 'Add README describing the calculator', 'content': '# Simple Calculator\n\nThis is a simple calculator implemented in Python. It supports basic arithmetic operations like addition, subtraction, multiplication, and division.', 'owner': 'puranjaigarg783'}","
list_my_repos: Return the full names (""owner/repo"") of all repos visible to the user.

read_file: Fetch a text/binary file and return its decoded content as str.

commit_file: Create or update *path* with *content* and return the new blob SHA. This tool is used to commit code or text files to a repository.

list_issues: 
    Retrieve all issues from a GitHub repository.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        owner (str, optional): Repository owner. Defaults to DEFAULT_OWNER.
        state (str, optional): Issue state filter: ""open"", ""closed"", or ""all"". Defaults to ""open"".

    Returns:
        List[Dict[str, Union[int, str]]]: A list of dicts each with:
            - number (int): Issue number
            - title (str): Issue title

    Raises:
        RuntimeError: On API errors or unexpected failures.
    

open_issue: Create a new issue and return its number. This tool is used to create new issues in a repository.

list_prs: Return pull requests matching *state* (and optional *base*).

create_pr: Create a pull request and return its number.

list_commits: Return commit SHAs for *branch* (limited by *per_page*).

search_repos: Search repositories and return their full names.

search_issues: Search issues/PRs and return their numbers.

create_repo: Create a new repository and return its full name. This tool is used to create a new GitHub repository.

close_issue: 
    Close an existing GitHub issue.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        issue_number (int): The number of the issue to close.
        owner (str, optional): Repository owner or organization. 
                               Defaults to DEFAULT_OWNER.

    Returns:
        str: Confirmation message.

    Raises:
        RuntimeError: On API errors or unexpected failures.
     This tool is used to close existing issues in a repository.

list_repo_files: 
    List all file paths in a given GitHub repository.

    :param repo: Repository name (e.g., 'Hello-World')
    :param branch: Branch name (default: 'main')
    :param owner: Owner of the repository (default: DEFAULT_OWNER)
    :param token: GitHub access token (recommended for private or high rate limit usage)
    :return: List of file paths
    

update_file_content: Creates or updates a file in a repository with the given content. Used for creating or updating files like README.md. This tool is used to create or update files in a repository, including README files.

delegate_to_repo_agent: Delegates a repository-related task to the RepoAgent which specializes in creating and managing repositories.

delegate_to_issues_agent: Delegates an issue-related task to the IssuesAgent which specializes in creating, managing, and closing issues.

delegate_to_content_agent: Delegates a content-related task to the ContentAgent which specializes in creating, reading, and modifying files and content.

delegate_to_search_agent: Delegates a search-related task to the SearchAgent which specializes in searching for repositories, issues, and other GitHub entities.
"
Commit a README file and calculator code to the puranjaigarg783/Picard repository. The README should describe the calculator. The calculator code should be a simple calculator implementation.,The current language of the user is: English. The repository was still not found. I will try listing the files in the repository to confirm the repository name and owner.,list_repo_files,{'repo': 'puranjaigarg783/Picard'},"
list_my_repos: Return the full names (""owner/repo"") of all repos visible to the user.

read_file: Fetch a text/binary file and return its decoded content as str.

commit_file: Create or update *path* with *content* and return the new blob SHA. This tool is used to commit code or text files to a repository.

list_issues: 
    Retrieve all issues from a GitHub repository.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        owner (str, optional): Repository owner. Defaults to DEFAULT_OWNER.
        state (str, optional): Issue state filter: ""open"", ""closed"", or ""all"". Defaults to ""open"".

    Returns:
        List[Dict[str, Union[int, str]]]: A list of dicts each with:
            - number (int): Issue number
            - title (str): Issue title

    Raises:
        RuntimeError: On API errors or unexpected failures.
    

open_issue: Create a new issue and return its number. This tool is used to create new issues in a repository.

list_prs: Return pull requests matching *state* (and optional *base*).

create_pr: Create a pull request and return its number.

list_commits: Return commit SHAs for *branch* (limited by *per_page*).

search_repos: Search repositories and return their full names.

search_issues: Search issues/PRs and return their numbers.

create_repo: Create a new repository and return its full name. This tool is used to create a new GitHub repository.

close_issue: 
    Close an existing GitHub issue.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        issue_number (int): The number of the issue to close.
        owner (str, optional): Repository owner or organization. 
                               Defaults to DEFAULT_OWNER.

    Returns:
        str: Confirmation message.

    Raises:
        RuntimeError: On API errors or unexpected failures.
     This tool is used to close existing issues in a repository.

list_repo_files: 
    List all file paths in a given GitHub repository.

    :param repo: Repository name (e.g., 'Hello-World')
    :param branch: Branch name (default: 'main')
    :param owner: Owner of the repository (default: DEFAULT_OWNER)
    :param token: GitHub access token (recommended for private or high rate limit usage)
    :return: List of file paths
    

update_file_content: Creates or updates a file in a repository with the given content. Used for creating or updating files like README.md. This tool is used to create or update files in a repository, including README files.

delegate_to_repo_agent: Delegates a repository-related task to the RepoAgent which specializes in creating and managing repositories.

delegate_to_issues_agent: Delegates an issue-related task to the IssuesAgent which specializes in creating, managing, and closing issues.

delegate_to_content_agent: Delegates a content-related task to the ContentAgent which specializes in creating, reading, and modifying files and content.

delegate_to_search_agent: Delegates a search-related task to the SearchAgent which specializes in searching for repositories, issues, and other GitHub entities.
"
Commit a README file and calculator code to the puranjaigarg783/Picard repository. The README should describe the calculator. The calculator code should be a simple calculator implementation.,The current language of the user is: English. The repository was still not found. It seems like the owner is incorrect. I will try listing the files in the repository with the correct owner.,list_repo_files,"{'repo': 'Picard', 'owner': 'puranjaigarg783'}","
list_my_repos: Return the full names (""owner/repo"") of all repos visible to the user.

read_file: Fetch a text/binary file and return its decoded content as str.

commit_file: Create or update *path* with *content* and return the new blob SHA. This tool is used to commit code or text files to a repository.

list_issues: 
    Retrieve all issues from a GitHub repository.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        owner (str, optional): Repository owner. Defaults to DEFAULT_OWNER.
        state (str, optional): Issue state filter: ""open"", ""closed"", or ""all"". Defaults to ""open"".

    Returns:
        List[Dict[str, Union[int, str]]]: A list of dicts each with:
            - number (int): Issue number
            - title (str): Issue title

    Raises:
        RuntimeError: On API errors or unexpected failures.
    

open_issue: Create a new issue and return its number. This tool is used to create new issues in a repository.

list_prs: Return pull requests matching *state* (and optional *base*).

create_pr: Create a pull request and return its number.

list_commits: Return commit SHAs for *branch* (limited by *per_page*).

search_repos: Search repositories and return their full names.

search_issues: Search issues/PRs and return their numbers.

create_repo: Create a new repository and return its full name. This tool is used to create a new GitHub repository.

close_issue: 
    Close an existing GitHub issue.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        issue_number (int): The number of the issue to close.
        owner (str, optional): Repository owner or organization. 
                               Defaults to DEFAULT_OWNER.

    Returns:
        str: Confirmation message.

    Raises:
        RuntimeError: On API errors or unexpected failures.
     This tool is used to close existing issues in a repository.

list_repo_files: 
    List all file paths in a given GitHub repository.

    :param repo: Repository name (e.g., 'Hello-World')
    :param branch: Branch name (default: 'main')
    :param owner: Owner of the repository (default: DEFAULT_OWNER)
    :param token: GitHub access token (recommended for private or high rate limit usage)
    :return: List of file paths
    

update_file_content: Creates or updates a file in a repository with the given content. Used for creating or updating files like README.md. This tool is used to create or update files in a repository, including README files.

delegate_to_repo_agent: Delegates a repository-related task to the RepoAgent which specializes in creating and managing repositories.

delegate_to_issues_agent: Delegates an issue-related task to the IssuesAgent which specializes in creating, managing, and closing issues.

delegate_to_content_agent: Delegates a content-related task to the ContentAgent which specializes in creating, reading, and modifying files and content.

delegate_to_search_agent: Delegates a search-related task to the SearchAgent which specializes in searching for repositories, issues, and other GitHub entities.
"
Commit a README file and calculator code to the puranjaigarg783/Picard repository. The README should describe the calculator. The calculator code should be a simple calculator implementation.,"The current language of the user is: English. The repository exists, but it's empty. Now I can proceed with creating the files.",update_file_content,"{'repo': 'Picard', 'path': 'README.md', 'message': 'Add README describing the calculator', 'content': '# Simple Calculator\n\nThis is a simple calculator implemented in Python. It supports basic arithmetic operations like addition, subtraction, multiplication, and division.', 'owner': 'puranjaigarg783'}","
list_my_repos: Return the full names (""owner/repo"") of all repos visible to the user.

read_file: Fetch a text/binary file and return its decoded content as str.

commit_file: Create or update *path* with *content* and return the new blob SHA. This tool is used to commit code or text files to a repository.

list_issues: 
    Retrieve all issues from a GitHub repository.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        owner (str, optional): Repository owner. Defaults to DEFAULT_OWNER.
        state (str, optional): Issue state filter: ""open"", ""closed"", or ""all"". Defaults to ""open"".

    Returns:
        List[Dict[str, Union[int, str]]]: A list of dicts each with:
            - number (int): Issue number
            - title (str): Issue title

    Raises:
        RuntimeError: On API errors or unexpected failures.
    

open_issue: Create a new issue and return its number. This tool is used to create new issues in a repository.

list_prs: Return pull requests matching *state* (and optional *base*).

create_pr: Create a pull request and return its number.

list_commits: Return commit SHAs for *branch* (limited by *per_page*).

search_repos: Search repositories and return their full names.

search_issues: Search issues/PRs and return their numbers.

create_repo: Create a new repository and return its full name. This tool is used to create a new GitHub repository.

close_issue: 
    Close an existing GitHub issue.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        issue_number (int): The number of the issue to close.
        owner (str, optional): Repository owner or organization. 
                               Defaults to DEFAULT_OWNER.

    Returns:
        str: Confirmation message.

    Raises:
        RuntimeError: On API errors or unexpected failures.
     This tool is used to close existing issues in a repository.

list_repo_files: 
    List all file paths in a given GitHub repository.

    :param repo: Repository name (e.g., 'Hello-World')
    :param branch: Branch name (default: 'main')
    :param owner: Owner of the repository (default: DEFAULT_OWNER)
    :param token: GitHub access token (recommended for private or high rate limit usage)
    :return: List of file paths
    

update_file_content: Creates or updates a file in a repository with the given content. Used for creating or updating files like README.md. This tool is used to create or update files in a repository, including README files.

delegate_to_repo_agent: Delegates a repository-related task to the RepoAgent which specializes in creating and managing repositories.

delegate_to_issues_agent: Delegates an issue-related task to the IssuesAgent which specializes in creating, managing, and closing issues.

delegate_to_content_agent: Delegates a content-related task to the ContentAgent which specializes in creating, reading, and modifying files and content.

delegate_to_search_agent: Delegates a search-related task to the SearchAgent which specializes in searching for repositories, issues, and other GitHub entities.
"
"
        You are a GitHub operations controller. Your job is to:
        1. Analyze the user's request to understand what they need
        2. Determine which specialized agent(s) should handle the request
        3. Delegate the relevant parts of the request to those agents
        4. Synthesize the results into a coherent response

        Available agents:
        - RepoAgent: Repository creation and management
        - IssuesAgent: Issue and PR tracking and management
        - ContentAgent: File content operations and management
        - SearchAgent: Searching GitHub repositories, issues, and PRs

        Use the appropriate delegation function for each agent.
        

User request: 
You are the Controller Agent for a GitHub operations system that orchestrates multiple specialized agents.

Your responsibilities:
1. Analyze user requests to determine which specialized agent(s) should handle them
2. Break down complex requests into sub-tasks for different agents
3. Coordinate the flow of information between agents
4. Synthesize responses from multiple agents into coherent answers

Available specialized agents:

1. RepoAgent
   - Capabilities: List repositories, create repositories, list commits
   - When to use: For repository management operations

2. IssuesAgent
   - Capabilities: List issues, create issues, close issues, list PRs, create PRs
   - When to use: For issue and pull request operations

3. ContentAgent
   - Capabilities: Read file content, update file content, list repository files
   - When to use: For operations involving file contents

4. SearchAgent
   - Capabilities: Search repositories, search issues
   - When to use: For search operations across GitHub

Decision making guidelines:
- Route requests to the most appropriate specialized agent based on the operation needed
- For complex requests, break them down and delegate parts to different agents
- When multiple agents are needed, coordinate the sequence of operations
- Provide clear context when delegating to an agent

Always maintain a helpful and informative tone with the user, even when handling errors.


User request: Create a repository under my github account puranjaigarg783 of the same as that of a star trek character. If a repository of the name of a star trek character already exists, chosse a different one, create an issue for adding a README for creating a calculator then commit code and readme for it close the issue after.","The ContentAgent failed to commit the code and README. This could be due to the complexity of the task. I'll try to break it down into smaller steps. First, I'll ask the ContentAgent to create the README file.",delegate_to_content_agent,{'query': 'Create a README file in the puranjaigarg783/Picard repository describing a simple calculator.'},"
list_my_repos: Return the full names (""owner/repo"") of all repos visible to the user.

read_file: Fetch a text/binary file and return its decoded content as str.

commit_file: Create or update *path* with *content* and return the new blob SHA. This tool is used to commit code or text files to a repository.

list_issues: 
    Retrieve all issues from a GitHub repository.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        owner (str, optional): Repository owner. Defaults to DEFAULT_OWNER.
        state (str, optional): Issue state filter: ""open"", ""closed"", or ""all"". Defaults to ""open"".

    Returns:
        List[Dict[str, Union[int, str]]]: A list of dicts each with:
            - number (int): Issue number
            - title (str): Issue title

    Raises:
        RuntimeError: On API errors or unexpected failures.
    

open_issue: Create a new issue and return its number. This tool is used to create new issues in a repository.

list_prs: Return pull requests matching *state* (and optional *base*).

create_pr: Create a pull request and return its number.

list_commits: Return commit SHAs for *branch* (limited by *per_page*).

search_repos: Search repositories and return their full names.

search_issues: Search issues/PRs and return their numbers.

create_repo: Create a new repository and return its full name. This tool is used to create a new GitHub repository.

close_issue: 
    Close an existing GitHub issue.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        issue_number (int): The number of the issue to close.
        owner (str, optional): Repository owner or organization. 
                               Defaults to DEFAULT_OWNER.

    Returns:
        str: Confirmation message.

    Raises:
        RuntimeError: On API errors or unexpected failures.
     This tool is used to close existing issues in a repository.

list_repo_files: 
    List all file paths in a given GitHub repository.

    :param repo: Repository name (e.g., 'Hello-World')
    :param branch: Branch name (default: 'main')
    :param owner: Owner of the repository (default: DEFAULT_OWNER)
    :param token: GitHub access token (recommended for private or high rate limit usage)
    :return: List of file paths
    

update_file_content: Creates or updates a file in a repository with the given content. Used for creating or updating files like README.md. This tool is used to create or update files in a repository, including README files.

delegate_to_repo_agent: Delegates a repository-related task to the RepoAgent which specializes in creating and managing repositories.

delegate_to_issues_agent: Delegates an issue-related task to the IssuesAgent which specializes in creating, managing, and closing issues.

delegate_to_content_agent: Delegates a content-related task to the ContentAgent which specializes in creating, reading, and modifying files and content.

delegate_to_search_agent: Delegates a search-related task to the SearchAgent which specializes in searching for repositories, issues, and other GitHub entities.
"
Create a README file in the puranjaigarg783/Picard repository describing a simple calculator.,The current language of the user is: English. I need to create a README file in the specified repository. I will use the update_file_content tool to create the file.,update_file_content,"{""repo"": ""Picard"", ""path"": ""README.md"", ""message"": ""Create README.md"", ""content"": ""# Simple Calculator\n\nThis is a simple calculator application.\n\n## Features\n\n- Addition\n- Subtraction\n- Multiplication\n- Division"", ""owner"": ""puranjaigarg783""} ```","
list_my_repos: Return the full names (""owner/repo"") of all repos visible to the user.

read_file: Fetch a text/binary file and return its decoded content as str.

commit_file: Create or update *path* with *content* and return the new blob SHA. This tool is used to commit code or text files to a repository.

list_issues: 
    Retrieve all issues from a GitHub repository.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        owner (str, optional): Repository owner. Defaults to DEFAULT_OWNER.
        state (str, optional): Issue state filter: ""open"", ""closed"", or ""all"". Defaults to ""open"".

    Returns:
        List[Dict[str, Union[int, str]]]: A list of dicts each with:
            - number (int): Issue number
            - title (str): Issue title

    Raises:
        RuntimeError: On API errors or unexpected failures.
    

open_issue: Create a new issue and return its number. This tool is used to create new issues in a repository.

list_prs: Return pull requests matching *state* (and optional *base*).

create_pr: Create a pull request and return its number.

list_commits: Return commit SHAs for *branch* (limited by *per_page*).

search_repos: Search repositories and return their full names.

search_issues: Search issues/PRs and return their numbers.

create_repo: Create a new repository and return its full name. This tool is used to create a new GitHub repository.

close_issue: 
    Close an existing GitHub issue.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        issue_number (int): The number of the issue to close.
        owner (str, optional): Repository owner or organization. 
                               Defaults to DEFAULT_OWNER.

    Returns:
        str: Confirmation message.

    Raises:
        RuntimeError: On API errors or unexpected failures.
     This tool is used to close existing issues in a repository.

list_repo_files: 
    List all file paths in a given GitHub repository.

    :param repo: Repository name (e.g., 'Hello-World')
    :param branch: Branch name (default: 'main')
    :param owner: Owner of the repository (default: DEFAULT_OWNER)
    :param token: GitHub access token (recommended for private or high rate limit usage)
    :return: List of file paths
    

update_file_content: Creates or updates a file in a repository with the given content. Used for creating or updating files like README.md. This tool is used to create or update files in a repository, including README files.

delegate_to_repo_agent: Delegates a repository-related task to the RepoAgent which specializes in creating and managing repositories.

delegate_to_issues_agent: Delegates an issue-related task to the IssuesAgent which specializes in creating, managing, and closing issues.

delegate_to_content_agent: Delegates a content-related task to the ContentAgent which specializes in creating, reading, and modifying files and content.

delegate_to_search_agent: Delegates a search-related task to the SearchAgent which specializes in searching for repositories, issues, and other GitHub entities.
"
"
        You are a GitHub operations controller. Your job is to:
        1. Analyze the user's request to understand what they need
        2. Determine which specialized agent(s) should handle the request
        3. Delegate the relevant parts of the request to those agents
        4. Synthesize the results into a coherent response

        Available agents:
        - RepoAgent: Repository creation and management
        - IssuesAgent: Issue and PR tracking and management
        - ContentAgent: File content operations and management
        - SearchAgent: Searching GitHub repositories, issues, and PRs

        Use the appropriate delegation function for each agent.
        

User request: 
You are the Controller Agent for a GitHub operations system that orchestrates multiple specialized agents.

Your responsibilities:
1. Analyze user requests to determine which specialized agent(s) should handle them
2. Break down complex requests into sub-tasks for different agents
3. Coordinate the flow of information between agents
4. Synthesize responses from multiple agents into coherent answers

Available specialized agents:

1. RepoAgent
   - Capabilities: List repositories, create repositories, list commits
   - When to use: For repository management operations

2. IssuesAgent
   - Capabilities: List issues, create issues, close issues, list PRs, create PRs
   - When to use: For issue and pull request operations

3. ContentAgent
   - Capabilities: Read file content, update file content, list repository files
   - When to use: For operations involving file contents

4. SearchAgent
   - Capabilities: Search repositories, search issues
   - When to use: For search operations across GitHub

Decision making guidelines:
- Route requests to the most appropriate specialized agent based on the operation needed
- For complex requests, break them down and delegate parts to different agents
- When multiple agents are needed, coordinate the sequence of operations
- Provide clear context when delegating to an agent

Always maintain a helpful and informative tone with the user, even when handling errors.


User request: Create a repository under my github account puranjaigarg783 of the same as that of a star trek character. If a repository of the name of a star trek character already exists, chosse a different one, create an issue for adding a README for creating a calculator then commit code and readme for it close the issue after.","Now that the README has been created, I'll ask the ContentAgent to commit the calculator code.",delegate_to_content_agent,"{'query': 'Commit a simple calculator implementation (e.g., in Python) to the puranjaigarg783/Picard repository.'}","
list_my_repos: Return the full names (""owner/repo"") of all repos visible to the user.

read_file: Fetch a text/binary file and return its decoded content as str.

commit_file: Create or update *path* with *content* and return the new blob SHA. This tool is used to commit code or text files to a repository.

list_issues: 
    Retrieve all issues from a GitHub repository.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        owner (str, optional): Repository owner. Defaults to DEFAULT_OWNER.
        state (str, optional): Issue state filter: ""open"", ""closed"", or ""all"". Defaults to ""open"".

    Returns:
        List[Dict[str, Union[int, str]]]: A list of dicts each with:
            - number (int): Issue number
            - title (str): Issue title

    Raises:
        RuntimeError: On API errors or unexpected failures.
    

open_issue: Create a new issue and return its number. This tool is used to create new issues in a repository.

list_prs: Return pull requests matching *state* (and optional *base*).

create_pr: Create a pull request and return its number.

list_commits: Return commit SHAs for *branch* (limited by *per_page*).

search_repos: Search repositories and return their full names.

search_issues: Search issues/PRs and return their numbers.

create_repo: Create a new repository and return its full name. This tool is used to create a new GitHub repository.

close_issue: 
    Close an existing GitHub issue.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        issue_number (int): The number of the issue to close.
        owner (str, optional): Repository owner or organization. 
                               Defaults to DEFAULT_OWNER.

    Returns:
        str: Confirmation message.

    Raises:
        RuntimeError: On API errors or unexpected failures.
     This tool is used to close existing issues in a repository.

list_repo_files: 
    List all file paths in a given GitHub repository.

    :param repo: Repository name (e.g., 'Hello-World')
    :param branch: Branch name (default: 'main')
    :param owner: Owner of the repository (default: DEFAULT_OWNER)
    :param token: GitHub access token (recommended for private or high rate limit usage)
    :return: List of file paths
    

update_file_content: Creates or updates a file in a repository with the given content. Used for creating or updating files like README.md. This tool is used to create or update files in a repository, including README files.

delegate_to_repo_agent: Delegates a repository-related task to the RepoAgent which specializes in creating and managing repositories.

delegate_to_issues_agent: Delegates an issue-related task to the IssuesAgent which specializes in creating, managing, and closing issues.

delegate_to_content_agent: Delegates a content-related task to the ContentAgent which specializes in creating, reading, and modifying files and content.

delegate_to_search_agent: Delegates a search-related task to the SearchAgent which specializes in searching for repositories, issues, and other GitHub entities.
"
Create a README file in the puranjaigarg783/Picard repository describing a simple calculator.,The user wants me to commit a simple calculator implementation to the puranjaigarg783/Picard repository. I will use the update_file_content tool to create a python file with the calculator implementation.,update_file_content,"{""repo"": ""puranjaigarg783/Picard"", ""path"": ""calculator.py"", ""message"": ""Add simple calculator implementation"", ""content"": ""def add(x, y):\n    return x + y\n\ndef subtract(x, y):\n    return x - y\n\ndef multiply(x, y):\n    return x * y\n\ndef divide(x, y):\n    if y == 0:\n        return \""Cannot divide by zero\""\n    return x / y\n\nif __name__ == \""__main__\"":\n    print(\""Select operation:\"")\n    print(\""1. Add\"")\n    print(\""2. Subtract\"")\n    print(\""3. Multiply\"")\n    print(\""4. Divide\"")\n\n    choice = input(\""Enter choice(1/2/3/4): \"")\n\n    num1 = float(input(\""Enter first number: \""))\n    num2 = float(input(\""Enter second number: \""))\n\n    if choice == '1':\n        print(num1, \""+\"", num2, \""=\"", add(num1, num2))\n\n    elif choice == '2':\n        print(num1, \""-\"", num2, \""=\"", subtract(num1, num2))\n\n    elif choice == '3':\n        print(num1, \""*\"", num2, \""=\"", multiply(num1, num2))\n\n    elif choice == '4':\n        print(num1, \""/\"", num2, \""=\"", divide(num1, num2))\n    else:\n        print(\""Invalid input\"")"", ""branch"": ""main""} ```","
list_my_repos: Return the full names (""owner/repo"") of all repos visible to the user.

read_file: Fetch a text/binary file and return its decoded content as str.

commit_file: Create or update *path* with *content* and return the new blob SHA. This tool is used to commit code or text files to a repository.

list_issues: 
    Retrieve all issues from a GitHub repository.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        owner (str, optional): Repository owner. Defaults to DEFAULT_OWNER.
        state (str, optional): Issue state filter: ""open"", ""closed"", or ""all"". Defaults to ""open"".

    Returns:
        List[Dict[str, Union[int, str]]]: A list of dicts each with:
            - number (int): Issue number
            - title (str): Issue title

    Raises:
        RuntimeError: On API errors or unexpected failures.
    

open_issue: Create a new issue and return its number. This tool is used to create new issues in a repository.

list_prs: Return pull requests matching *state* (and optional *base*).

create_pr: Create a pull request and return its number.

list_commits: Return commit SHAs for *branch* (limited by *per_page*).

search_repos: Search repositories and return their full names.

search_issues: Search issues/PRs and return their numbers.

create_repo: Create a new repository and return its full name. This tool is used to create a new GitHub repository.

close_issue: 
    Close an existing GitHub issue.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        issue_number (int): The number of the issue to close.
        owner (str, optional): Repository owner or organization. 
                               Defaults to DEFAULT_OWNER.

    Returns:
        str: Confirmation message.

    Raises:
        RuntimeError: On API errors or unexpected failures.
     This tool is used to close existing issues in a repository.

list_repo_files: 
    List all file paths in a given GitHub repository.

    :param repo: Repository name (e.g., 'Hello-World')
    :param branch: Branch name (default: 'main')
    :param owner: Owner of the repository (default: DEFAULT_OWNER)
    :param token: GitHub access token (recommended for private or high rate limit usage)
    :return: List of file paths
    

update_file_content: Creates or updates a file in a repository with the given content. Used for creating or updating files like README.md. This tool is used to create or update files in a repository, including README files.

delegate_to_repo_agent: Delegates a repository-related task to the RepoAgent which specializes in creating and managing repositories.

delegate_to_issues_agent: Delegates an issue-related task to the IssuesAgent which specializes in creating, managing, and closing issues.

delegate_to_content_agent: Delegates a content-related task to the ContentAgent which specializes in creating, reading, and modifying files and content.

delegate_to_search_agent: Delegates a search-related task to the SearchAgent which specializes in searching for repositories, issues, and other GitHub entities.
"
Create a README file in the puranjaigarg783/Picard repository describing a simple calculator.,The previous attempt to commit the calculator implementation failed because the repository path was incorrect. It seems I combined the owner and repo name incorrectly. I should use 'puranjaigarg783/Picard' as the repo.,update_file_content,"{'repo': 'puranjaigarg783/Picard', 'path': 'calculator.py', 'message': 'Add simple calculator implementation', 'content': 'def add(x, y):\n    return x + y\n\ndef subtract(x, y):\n    return x - y\n\ndef multiply(x, y):\n    return x * y\n\ndef divide(x, y):\n    if y == 0:\n        return ""Cannot divide by zero""\n    return x / y\n\nif __name__ == ""__main__"":\n    print(""Select operation:"")\n    print(""1. Add"")\n    print(""2. Subtract"")\n    print(""3. Multiply"")\n    print(""4. Divide"")\n\n    choice = input(""Enter choice(1/2/3/4): "")\n\n    num1 = float(input(""Enter first number: ""))\n    num2 = float(input(""Enter second number: ""))\n\n    if choice == \'1\':\n        print(num1, ""+"", num2, ""="", add(num1, num2))\n\n    elif choice == \'2\':\n        print(num1, ""-"", num2, ""="", subtract(num1, num2))\n\n    elif choice == \'3\':\n        print(num1, ""*"", num2, ""="", multiply(num1, num2))\n\n    elif choice == \'4\':\n        print(num1, ""/"", num2, ""="", divide(num1, num2))\n    else:\n        print(""Invalid input"")', 'branch': 'main'}","
list_my_repos: Return the full names (""owner/repo"") of all repos visible to the user.

read_file: Fetch a text/binary file and return its decoded content as str.

commit_file: Create or update *path* with *content* and return the new blob SHA. This tool is used to commit code or text files to a repository.

list_issues: 
    Retrieve all issues from a GitHub repository.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        owner (str, optional): Repository owner. Defaults to DEFAULT_OWNER.
        state (str, optional): Issue state filter: ""open"", ""closed"", or ""all"". Defaults to ""open"".

    Returns:
        List[Dict[str, Union[int, str]]]: A list of dicts each with:
            - number (int): Issue number
            - title (str): Issue title

    Raises:
        RuntimeError: On API errors or unexpected failures.
    

open_issue: Create a new issue and return its number. This tool is used to create new issues in a repository.

list_prs: Return pull requests matching *state* (and optional *base*).

create_pr: Create a pull request and return its number.

list_commits: Return commit SHAs for *branch* (limited by *per_page*).

search_repos: Search repositories and return their full names.

search_issues: Search issues/PRs and return their numbers.

create_repo: Create a new repository and return its full name. This tool is used to create a new GitHub repository.

close_issue: 
    Close an existing GitHub issue.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        issue_number (int): The number of the issue to close.
        owner (str, optional): Repository owner or organization. 
                               Defaults to DEFAULT_OWNER.

    Returns:
        str: Confirmation message.

    Raises:
        RuntimeError: On API errors or unexpected failures.
     This tool is used to close existing issues in a repository.

list_repo_files: 
    List all file paths in a given GitHub repository.

    :param repo: Repository name (e.g., 'Hello-World')
    :param branch: Branch name (default: 'main')
    :param owner: Owner of the repository (default: DEFAULT_OWNER)
    :param token: GitHub access token (recommended for private or high rate limit usage)
    :return: List of file paths
    

update_file_content: Creates or updates a file in a repository with the given content. Used for creating or updating files like README.md. This tool is used to create or update files in a repository, including README files.

delegate_to_repo_agent: Delegates a repository-related task to the RepoAgent which specializes in creating and managing repositories.

delegate_to_issues_agent: Delegates an issue-related task to the IssuesAgent which specializes in creating, managing, and closing issues.

delegate_to_content_agent: Delegates a content-related task to the ContentAgent which specializes in creating, reading, and modifying files and content.

delegate_to_search_agent: Delegates a search-related task to the SearchAgent which specializes in searching for repositories, issues, and other GitHub entities.
"
Create a README file in the puranjaigarg783/Picard repository describing a simple calculator.,"The previous attempt to commit the calculator implementation failed again with a ""Not Found"" error. It seems I'm still having trouble with the repository name. I will try listing the files in the repository to confirm the repository name.",list_repo_files,{'repo': 'puranjaigarg783/Picard'},"
list_my_repos: Return the full names (""owner/repo"") of all repos visible to the user.

read_file: Fetch a text/binary file and return its decoded content as str.

commit_file: Create or update *path* with *content* and return the new blob SHA. This tool is used to commit code or text files to a repository.

list_issues: 
    Retrieve all issues from a GitHub repository.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        owner (str, optional): Repository owner. Defaults to DEFAULT_OWNER.
        state (str, optional): Issue state filter: ""open"", ""closed"", or ""all"". Defaults to ""open"".

    Returns:
        List[Dict[str, Union[int, str]]]: A list of dicts each with:
            - number (int): Issue number
            - title (str): Issue title

    Raises:
        RuntimeError: On API errors or unexpected failures.
    

open_issue: Create a new issue and return its number. This tool is used to create new issues in a repository.

list_prs: Return pull requests matching *state* (and optional *base*).

create_pr: Create a pull request and return its number.

list_commits: Return commit SHAs for *branch* (limited by *per_page*).

search_repos: Search repositories and return their full names.

search_issues: Search issues/PRs and return their numbers.

create_repo: Create a new repository and return its full name. This tool is used to create a new GitHub repository.

close_issue: 
    Close an existing GitHub issue.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        issue_number (int): The number of the issue to close.
        owner (str, optional): Repository owner or organization. 
                               Defaults to DEFAULT_OWNER.

    Returns:
        str: Confirmation message.

    Raises:
        RuntimeError: On API errors or unexpected failures.
     This tool is used to close existing issues in a repository.

list_repo_files: 
    List all file paths in a given GitHub repository.

    :param repo: Repository name (e.g., 'Hello-World')
    :param branch: Branch name (default: 'main')
    :param owner: Owner of the repository (default: DEFAULT_OWNER)
    :param token: GitHub access token (recommended for private or high rate limit usage)
    :return: List of file paths
    

update_file_content: Creates or updates a file in a repository with the given content. Used for creating or updating files like README.md. This tool is used to create or update files in a repository, including README files.

delegate_to_repo_agent: Delegates a repository-related task to the RepoAgent which specializes in creating and managing repositories.

delegate_to_issues_agent: Delegates an issue-related task to the IssuesAgent which specializes in creating, managing, and closing issues.

delegate_to_content_agent: Delegates a content-related task to the ContentAgent which specializes in creating, reading, and modifying files and content.

delegate_to_search_agent: Delegates a search-related task to the SearchAgent which specializes in searching for repositories, issues, and other GitHub entities.
"
Create a README file in the puranjaigarg783/Picard repository describing a simple calculator.,"It seems like I am consistently getting the repository name wrong. The error message ""Not Found"" suggests that the repository 'puranjaigarg783/Picard' does not exist under the user 'Shreyas-Yadav'. I will try to create the file under the 'puranjaigarg783' user.",update_file_content,"{'repo': 'Picard', 'path': 'calculator.py', 'message': 'Add simple calculator implementation', 'content': 'def add(x, y):\n    return x + y\n\ndef subtract(x, y):\n    return x - y\n\ndef multiply(x, y):\n    return x * y\n\ndef divide(x, y):\n    if y == 0:\n        return ""Cannot divide by zero""\n    return x / y\n\nif __name__ == ""__main__"":\n    print(""Select operation:"")\n    print(""1. Add"")\n    print(""2. Subtract"")\n    print(""3. Multiply"")\n    print(""4. Divide"")\n\n    choice = input(""Enter choice(1/2/3/4): "")\n\n    num1 = float(input(""Enter first number: ""))\n    num2 = float(input(""Enter second number: ""))\n\n    if choice == \'1\':\n        print(num1, ""+"", num2, ""="", add(num1, num2))\n\n    elif choice == \'2\':\n        print(num1, ""-"", num2, ""="", subtract(num1, num2))\n\n    elif choice == \'3\':\n        print(num1, ""*"", num2, ""="", multiply(num1, num2))\n\n    elif choice == \'4\':\n        print(num1, ""/"", num2, ""="", divide(num1, num2))\n    else:\n        print(""Invalid input"")', 'branch': 'main', 'owner': 'puranjaigarg783'}","
list_my_repos: Return the full names (""owner/repo"") of all repos visible to the user.

read_file: Fetch a text/binary file and return its decoded content as str.

commit_file: Create or update *path* with *content* and return the new blob SHA. This tool is used to commit code or text files to a repository.

list_issues: 
    Retrieve all issues from a GitHub repository.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        owner (str, optional): Repository owner. Defaults to DEFAULT_OWNER.
        state (str, optional): Issue state filter: ""open"", ""closed"", or ""all"". Defaults to ""open"".

    Returns:
        List[Dict[str, Union[int, str]]]: A list of dicts each with:
            - number (int): Issue number
            - title (str): Issue title

    Raises:
        RuntimeError: On API errors or unexpected failures.
    

open_issue: Create a new issue and return its number. This tool is used to create new issues in a repository.

list_prs: Return pull requests matching *state* (and optional *base*).

create_pr: Create a pull request and return its number.

list_commits: Return commit SHAs for *branch* (limited by *per_page*).

search_repos: Search repositories and return their full names.

search_issues: Search issues/PRs and return their numbers.

create_repo: Create a new repository and return its full name. This tool is used to create a new GitHub repository.

close_issue: 
    Close an existing GitHub issue.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        issue_number (int): The number of the issue to close.
        owner (str, optional): Repository owner or organization. 
                               Defaults to DEFAULT_OWNER.

    Returns:
        str: Confirmation message.

    Raises:
        RuntimeError: On API errors or unexpected failures.
     This tool is used to close existing issues in a repository.

list_repo_files: 
    List all file paths in a given GitHub repository.

    :param repo: Repository name (e.g., 'Hello-World')
    :param branch: Branch name (default: 'main')
    :param owner: Owner of the repository (default: DEFAULT_OWNER)
    :param token: GitHub access token (recommended for private or high rate limit usage)
    :return: List of file paths
    

update_file_content: Creates or updates a file in a repository with the given content. Used for creating or updating files like README.md. This tool is used to create or update files in a repository, including README files.

delegate_to_repo_agent: Delegates a repository-related task to the RepoAgent which specializes in creating and managing repositories.

delegate_to_issues_agent: Delegates an issue-related task to the IssuesAgent which specializes in creating, managing, and closing issues.

delegate_to_content_agent: Delegates a content-related task to the ContentAgent which specializes in creating, reading, and modifying files and content.

delegate_to_search_agent: Delegates a search-related task to the SearchAgent which specializes in searching for repositories, issues, and other GitHub entities.
"
"
        You are a GitHub operations controller. Your job is to:
        1. Analyze the user's request to understand what they need
        2. Determine which specialized agent(s) should handle the request
        3. Delegate the relevant parts of the request to those agents
        4. Synthesize the results into a coherent response

        Available agents:
        - RepoAgent: Repository creation and management
        - IssuesAgent: Issue and PR tracking and management
        - ContentAgent: File content operations and management
        - SearchAgent: Searching GitHub repositories, issues, and PRs

        Use the appropriate delegation function for each agent.
        

User request: 
You are the Controller Agent for a GitHub operations system that orchestrates multiple specialized agents.

Your responsibilities:
1. Analyze user requests to determine which specialized agent(s) should handle them
2. Break down complex requests into sub-tasks for different agents
3. Coordinate the flow of information between agents
4. Synthesize responses from multiple agents into coherent answers

Available specialized agents:

1. RepoAgent
   - Capabilities: List repositories, create repositories, list commits
   - When to use: For repository management operations

2. IssuesAgent
   - Capabilities: List issues, create issues, close issues, list PRs, create PRs
   - When to use: For issue and pull request operations

3. ContentAgent
   - Capabilities: Read file content, update file content, list repository files
   - When to use: For operations involving file contents

4. SearchAgent
   - Capabilities: Search repositories, search issues
   - When to use: For search operations across GitHub

Decision making guidelines:
- Route requests to the most appropriate specialized agent based on the operation needed
- For complex requests, break them down and delegate parts to different agents
- When multiple agents are needed, coordinate the sequence of operations
- Provide clear context when delegating to an agent

Always maintain a helpful and informative tone with the user, even when handling errors.


User request: Create a repository under my github account puranjaigarg783 of the same as that of a star trek character. If a repository of the name of a star trek character already exists, chosse a different one, create an issue for adding a README for creating a calculator then commit code and readme for it close the issue after.","Now that the code and README have been committed, I need to close the issue. I'll delegate this to the IssuesAgent.",delegate_to_issues_agent,{'query': 'Close issue number 1 in the puranjaigarg783/Picard repository.'},"
list_my_repos: Return the full names (""owner/repo"") of all repos visible to the user.

read_file: Fetch a text/binary file and return its decoded content as str.

commit_file: Create or update *path* with *content* and return the new blob SHA. This tool is used to commit code or text files to a repository.

list_issues: 
    Retrieve all issues from a GitHub repository.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        owner (str, optional): Repository owner. Defaults to DEFAULT_OWNER.
        state (str, optional): Issue state filter: ""open"", ""closed"", or ""all"". Defaults to ""open"".

    Returns:
        List[Dict[str, Union[int, str]]]: A list of dicts each with:
            - number (int): Issue number
            - title (str): Issue title

    Raises:
        RuntimeError: On API errors or unexpected failures.
    

open_issue: Create a new issue and return its number. This tool is used to create new issues in a repository.

list_prs: Return pull requests matching *state* (and optional *base*).

create_pr: Create a pull request and return its number.

list_commits: Return commit SHAs for *branch* (limited by *per_page*).

search_repos: Search repositories and return their full names.

search_issues: Search issues/PRs and return their numbers.

create_repo: Create a new repository and return its full name. This tool is used to create a new GitHub repository.

close_issue: 
    Close an existing GitHub issue.

    Args:
        repo (str): Repository name (e.g. ""my-repo"").
        issue_number (int): The number of the issue to close.
        owner (str, optional): Repository owner or organization. 
                               Defaults to DEFAULT_OWNER.

    Returns:
        str: Confirmation message.

    Raises:
        RuntimeError: On API errors or unexpected failures.
     This tool is used to close existing issues in a repository.

list_repo_files: 
    List all file paths in a given GitHub repository.

    :param repo: Repository name (e.g., 'Hello-World')
    :param branch: Branch name (default: 'main')
    :param owner: Owner of the repository (default: DEFAULT_OWNER)
    :param token: GitHub access token (recommended for private or high rate limit usage)
    :return: List of file paths
    

update_file_content: Creates or updates a file in a repository with the given content. Used for creating or updating files like README.md. This tool is used to create or update files in a repository, including README files.

delegate_to_repo_agent: Delegates a repository-related task to the RepoAgent which specializes in creating and managing repositories.

delegate_to_issues_agent: Delegates an issue-related task to the IssuesAgent which specializes in creating, managing, and closing issues.

delegate_to_content_agent: Delegates a content-related task to the ContentAgent which specializes in creating, reading, and modifying files and content.

delegate_to_search_agent: Delegates a search-related task to the SearchAgent which specializes in searching for repositories, issues, and other GitHub entities.
"
